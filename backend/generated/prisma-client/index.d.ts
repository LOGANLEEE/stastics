// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  bobae: (where?: BobaeWhereInput) => Promise<boolean>;
  bullpen: (where?: BullpenWhereInput) => Promise<boolean>;
  clien: (where?: ClienWhereInput) => Promise<boolean>;
  cook: (where?: CookWhereInput) => Promise<boolean>;
  dogDrip: (where?: DogDripWhereInput) => Promise<boolean>;
  errorLog: (where?: ErrorLogWhereInput) => Promise<boolean>;
  etoland: (where?: EtolandWhereInput) => Promise<boolean>;
  fmKorea: (where?: FmKoreaWhereInput) => Promise<boolean>;
  gasengi: (where?: GasengiWhereInput) => Promise<boolean>;
  humorUniv: (where?: HumorUnivWhereInput) => Promise<boolean>;
  ilbe: (where?: IlbeWhereInput) => Promise<boolean>;
  instiz: (where?: InstizWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  postLinks: (where?: PostLinksWhereInput) => Promise<boolean>;
  ppompPu: (where?: PpompPuWhereInput) => Promise<boolean>;
  ruliWeb: (where?: RuliWebWhereInput) => Promise<boolean>;
  sLRClub: (where?: SLRClubWhereInput) => Promise<boolean>;
  savedPosts: (where?: SavedPostsWhereInput) => Promise<boolean>;
  sortedPosts: (where?: SortedPostsWhereInput) => Promise<boolean>;
  theQoo: (where?: TheQooWhereInput) => Promise<boolean>;
  todayHumor: (where?: TodayHumorWhereInput) => Promise<boolean>;
  preProcessedPost: (where?: preProcessedPostWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bobae: (where: BobaeWhereUniqueInput) => BobaeNullablePromise;
  bobaes: (args?: {
    where?: BobaeWhereInput;
    orderBy?: BobaeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bobae>;
  bobaesConnection: (args?: {
    where?: BobaeWhereInput;
    orderBy?: BobaeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BobaeConnectionPromise;
  bullpen: (where: BullpenWhereUniqueInput) => BullpenNullablePromise;
  bullpens: (args?: {
    where?: BullpenWhereInput;
    orderBy?: BullpenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bullpen>;
  bullpensConnection: (args?: {
    where?: BullpenWhereInput;
    orderBy?: BullpenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BullpenConnectionPromise;
  clien: (where: ClienWhereUniqueInput) => ClienNullablePromise;
  cliens: (args?: {
    where?: ClienWhereInput;
    orderBy?: ClienOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Clien>;
  cliensConnection: (args?: {
    where?: ClienWhereInput;
    orderBy?: ClienOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClienConnectionPromise;
  cook: (where: CookWhereUniqueInput) => CookNullablePromise;
  cooks: (args?: {
    where?: CookWhereInput;
    orderBy?: CookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cook>;
  cooksConnection: (args?: {
    where?: CookWhereInput;
    orderBy?: CookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CookConnectionPromise;
  dogDrip: (where: DogDripWhereUniqueInput) => DogDripNullablePromise;
  dogDrips: (args?: {
    where?: DogDripWhereInput;
    orderBy?: DogDripOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DogDrip>;
  dogDripsConnection: (args?: {
    where?: DogDripWhereInput;
    orderBy?: DogDripOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DogDripConnectionPromise;
  errorLog: (where: ErrorLogWhereUniqueInput) => ErrorLogNullablePromise;
  errorLogs: (args?: {
    where?: ErrorLogWhereInput;
    orderBy?: ErrorLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ErrorLog>;
  errorLogsConnection: (args?: {
    where?: ErrorLogWhereInput;
    orderBy?: ErrorLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ErrorLogConnectionPromise;
  etoland: (where: EtolandWhereUniqueInput) => EtolandNullablePromise;
  etolands: (args?: {
    where?: EtolandWhereInput;
    orderBy?: EtolandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Etoland>;
  etolandsConnection: (args?: {
    where?: EtolandWhereInput;
    orderBy?: EtolandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EtolandConnectionPromise;
  fmKorea: (where: FmKoreaWhereUniqueInput) => FmKoreaNullablePromise;
  fmKoreas: (args?: {
    where?: FmKoreaWhereInput;
    orderBy?: FmKoreaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FmKorea>;
  fmKoreasConnection: (args?: {
    where?: FmKoreaWhereInput;
    orderBy?: FmKoreaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FmKoreaConnectionPromise;
  gasengi: (where: GasengiWhereUniqueInput) => GasengiNullablePromise;
  gasengis: (args?: {
    where?: GasengiWhereInput;
    orderBy?: GasengiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gasengi>;
  gasengisConnection: (args?: {
    where?: GasengiWhereInput;
    orderBy?: GasengiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GasengiConnectionPromise;
  humorUniv: (where: HumorUnivWhereUniqueInput) => HumorUnivNullablePromise;
  humorUnivs: (args?: {
    where?: HumorUnivWhereInput;
    orderBy?: HumorUnivOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<HumorUniv>;
  humorUnivsConnection: (args?: {
    where?: HumorUnivWhereInput;
    orderBy?: HumorUnivOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HumorUnivConnectionPromise;
  ilbe: (where: IlbeWhereUniqueInput) => IlbeNullablePromise;
  ilbes: (args?: {
    where?: IlbeWhereInput;
    orderBy?: IlbeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ilbe>;
  ilbesConnection: (args?: {
    where?: IlbeWhereInput;
    orderBy?: IlbeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IlbeConnectionPromise;
  instiz: (where: InstizWhereUniqueInput) => InstizNullablePromise;
  instizes: (args?: {
    where?: InstizWhereInput;
    orderBy?: InstizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Instiz>;
  instizesConnection: (args?: {
    where?: InstizWhereInput;
    orderBy?: InstizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InstizConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  postLinks: (where: PostLinksWhereUniqueInput) => PostLinksNullablePromise;
  postLinkses: (args?: {
    where?: PostLinksWhereInput;
    orderBy?: PostLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PostLinks>;
  postLinksesConnection: (args?: {
    where?: PostLinksWhereInput;
    orderBy?: PostLinksOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostLinksConnectionPromise;
  ppompPu: (where: PpompPuWhereUniqueInput) => PpompPuNullablePromise;
  ppompPus: (args?: {
    where?: PpompPuWhereInput;
    orderBy?: PpompPuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PpompPu>;
  ppompPusConnection: (args?: {
    where?: PpompPuWhereInput;
    orderBy?: PpompPuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PpompPuConnectionPromise;
  ruliWeb: (where: RuliWebWhereUniqueInput) => RuliWebNullablePromise;
  ruliWebs: (args?: {
    where?: RuliWebWhereInput;
    orderBy?: RuliWebOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RuliWeb>;
  ruliWebsConnection: (args?: {
    where?: RuliWebWhereInput;
    orderBy?: RuliWebOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RuliWebConnectionPromise;
  sLRClub: (where: SLRClubWhereUniqueInput) => SLRClubNullablePromise;
  sLRClubs: (args?: {
    where?: SLRClubWhereInput;
    orderBy?: SLRClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SLRClub>;
  sLRClubsConnection: (args?: {
    where?: SLRClubWhereInput;
    orderBy?: SLRClubOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SLRClubConnectionPromise;
  savedPosts: (where: SavedPostsWhereUniqueInput) => SavedPostsNullablePromise;
  savedPostses: (args?: {
    where?: SavedPostsWhereInput;
    orderBy?: SavedPostsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SavedPosts>;
  savedPostsesConnection: (args?: {
    where?: SavedPostsWhereInput;
    orderBy?: SavedPostsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SavedPostsConnectionPromise;
  sortedPosts: (
    where: SortedPostsWhereUniqueInput
  ) => SortedPostsNullablePromise;
  sortedPostses: (args?: {
    where?: SortedPostsWhereInput;
    orderBy?: SortedPostsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SortedPosts>;
  sortedPostsesConnection: (args?: {
    where?: SortedPostsWhereInput;
    orderBy?: SortedPostsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SortedPostsConnectionPromise;
  theQoo: (where: TheQooWhereUniqueInput) => TheQooNullablePromise;
  theQoos: (args?: {
    where?: TheQooWhereInput;
    orderBy?: TheQooOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TheQoo>;
  theQoosConnection: (args?: {
    where?: TheQooWhereInput;
    orderBy?: TheQooOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TheQooConnectionPromise;
  todayHumor: (where: TodayHumorWhereUniqueInput) => TodayHumorNullablePromise;
  todayHumors: (args?: {
    where?: TodayHumorWhereInput;
    orderBy?: TodayHumorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TodayHumor>;
  todayHumorsConnection: (args?: {
    where?: TodayHumorWhereInput;
    orderBy?: TodayHumorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TodayHumorConnectionPromise;
  preProcessedPost: (
    where: preProcessedPostWhereUniqueInput
  ) => preProcessedPostNullablePromise;
  preProcessedPosts: (args?: {
    where?: preProcessedPostWhereInput;
    orderBy?: preProcessedPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<preProcessedPost>;
  preProcessedPostsConnection: (args?: {
    where?: preProcessedPostWhereInput;
    orderBy?: preProcessedPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => preProcessedPostConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBobae: (data: BobaeCreateInput) => BobaePromise;
  updateBobae: (args: {
    data: BobaeUpdateInput;
    where: BobaeWhereUniqueInput;
  }) => BobaePromise;
  updateManyBobaes: (args: {
    data: BobaeUpdateManyMutationInput;
    where?: BobaeWhereInput;
  }) => BatchPayloadPromise;
  upsertBobae: (args: {
    where: BobaeWhereUniqueInput;
    create: BobaeCreateInput;
    update: BobaeUpdateInput;
  }) => BobaePromise;
  deleteBobae: (where: BobaeWhereUniqueInput) => BobaePromise;
  deleteManyBobaes: (where?: BobaeWhereInput) => BatchPayloadPromise;
  createBullpen: (data: BullpenCreateInput) => BullpenPromise;
  updateBullpen: (args: {
    data: BullpenUpdateInput;
    where: BullpenWhereUniqueInput;
  }) => BullpenPromise;
  updateManyBullpens: (args: {
    data: BullpenUpdateManyMutationInput;
    where?: BullpenWhereInput;
  }) => BatchPayloadPromise;
  upsertBullpen: (args: {
    where: BullpenWhereUniqueInput;
    create: BullpenCreateInput;
    update: BullpenUpdateInput;
  }) => BullpenPromise;
  deleteBullpen: (where: BullpenWhereUniqueInput) => BullpenPromise;
  deleteManyBullpens: (where?: BullpenWhereInput) => BatchPayloadPromise;
  createClien: (data: ClienCreateInput) => ClienPromise;
  updateClien: (args: {
    data: ClienUpdateInput;
    where: ClienWhereUniqueInput;
  }) => ClienPromise;
  updateManyCliens: (args: {
    data: ClienUpdateManyMutationInput;
    where?: ClienWhereInput;
  }) => BatchPayloadPromise;
  upsertClien: (args: {
    where: ClienWhereUniqueInput;
    create: ClienCreateInput;
    update: ClienUpdateInput;
  }) => ClienPromise;
  deleteClien: (where: ClienWhereUniqueInput) => ClienPromise;
  deleteManyCliens: (where?: ClienWhereInput) => BatchPayloadPromise;
  createCook: (data: CookCreateInput) => CookPromise;
  updateCook: (args: {
    data: CookUpdateInput;
    where: CookWhereUniqueInput;
  }) => CookPromise;
  updateManyCooks: (args: {
    data: CookUpdateManyMutationInput;
    where?: CookWhereInput;
  }) => BatchPayloadPromise;
  upsertCook: (args: {
    where: CookWhereUniqueInput;
    create: CookCreateInput;
    update: CookUpdateInput;
  }) => CookPromise;
  deleteCook: (where: CookWhereUniqueInput) => CookPromise;
  deleteManyCooks: (where?: CookWhereInput) => BatchPayloadPromise;
  createDogDrip: (data: DogDripCreateInput) => DogDripPromise;
  updateDogDrip: (args: {
    data: DogDripUpdateInput;
    where: DogDripWhereUniqueInput;
  }) => DogDripPromise;
  updateManyDogDrips: (args: {
    data: DogDripUpdateManyMutationInput;
    where?: DogDripWhereInput;
  }) => BatchPayloadPromise;
  upsertDogDrip: (args: {
    where: DogDripWhereUniqueInput;
    create: DogDripCreateInput;
    update: DogDripUpdateInput;
  }) => DogDripPromise;
  deleteDogDrip: (where: DogDripWhereUniqueInput) => DogDripPromise;
  deleteManyDogDrips: (where?: DogDripWhereInput) => BatchPayloadPromise;
  createErrorLog: (data: ErrorLogCreateInput) => ErrorLogPromise;
  updateErrorLog: (args: {
    data: ErrorLogUpdateInput;
    where: ErrorLogWhereUniqueInput;
  }) => ErrorLogPromise;
  updateManyErrorLogs: (args: {
    data: ErrorLogUpdateManyMutationInput;
    where?: ErrorLogWhereInput;
  }) => BatchPayloadPromise;
  upsertErrorLog: (args: {
    where: ErrorLogWhereUniqueInput;
    create: ErrorLogCreateInput;
    update: ErrorLogUpdateInput;
  }) => ErrorLogPromise;
  deleteErrorLog: (where: ErrorLogWhereUniqueInput) => ErrorLogPromise;
  deleteManyErrorLogs: (where?: ErrorLogWhereInput) => BatchPayloadPromise;
  createEtoland: (data: EtolandCreateInput) => EtolandPromise;
  updateEtoland: (args: {
    data: EtolandUpdateInput;
    where: EtolandWhereUniqueInput;
  }) => EtolandPromise;
  updateManyEtolands: (args: {
    data: EtolandUpdateManyMutationInput;
    where?: EtolandWhereInput;
  }) => BatchPayloadPromise;
  upsertEtoland: (args: {
    where: EtolandWhereUniqueInput;
    create: EtolandCreateInput;
    update: EtolandUpdateInput;
  }) => EtolandPromise;
  deleteEtoland: (where: EtolandWhereUniqueInput) => EtolandPromise;
  deleteManyEtolands: (where?: EtolandWhereInput) => BatchPayloadPromise;
  createFmKorea: (data: FmKoreaCreateInput) => FmKoreaPromise;
  updateFmKorea: (args: {
    data: FmKoreaUpdateInput;
    where: FmKoreaWhereUniqueInput;
  }) => FmKoreaPromise;
  updateManyFmKoreas: (args: {
    data: FmKoreaUpdateManyMutationInput;
    where?: FmKoreaWhereInput;
  }) => BatchPayloadPromise;
  upsertFmKorea: (args: {
    where: FmKoreaWhereUniqueInput;
    create: FmKoreaCreateInput;
    update: FmKoreaUpdateInput;
  }) => FmKoreaPromise;
  deleteFmKorea: (where: FmKoreaWhereUniqueInput) => FmKoreaPromise;
  deleteManyFmKoreas: (where?: FmKoreaWhereInput) => BatchPayloadPromise;
  createGasengi: (data: GasengiCreateInput) => GasengiPromise;
  updateGasengi: (args: {
    data: GasengiUpdateInput;
    where: GasengiWhereUniqueInput;
  }) => GasengiPromise;
  updateManyGasengis: (args: {
    data: GasengiUpdateManyMutationInput;
    where?: GasengiWhereInput;
  }) => BatchPayloadPromise;
  upsertGasengi: (args: {
    where: GasengiWhereUniqueInput;
    create: GasengiCreateInput;
    update: GasengiUpdateInput;
  }) => GasengiPromise;
  deleteGasengi: (where: GasengiWhereUniqueInput) => GasengiPromise;
  deleteManyGasengis: (where?: GasengiWhereInput) => BatchPayloadPromise;
  createHumorUniv: (data: HumorUnivCreateInput) => HumorUnivPromise;
  updateHumorUniv: (args: {
    data: HumorUnivUpdateInput;
    where: HumorUnivWhereUniqueInput;
  }) => HumorUnivPromise;
  updateManyHumorUnivs: (args: {
    data: HumorUnivUpdateManyMutationInput;
    where?: HumorUnivWhereInput;
  }) => BatchPayloadPromise;
  upsertHumorUniv: (args: {
    where: HumorUnivWhereUniqueInput;
    create: HumorUnivCreateInput;
    update: HumorUnivUpdateInput;
  }) => HumorUnivPromise;
  deleteHumorUniv: (where: HumorUnivWhereUniqueInput) => HumorUnivPromise;
  deleteManyHumorUnivs: (where?: HumorUnivWhereInput) => BatchPayloadPromise;
  createIlbe: (data: IlbeCreateInput) => IlbePromise;
  updateIlbe: (args: {
    data: IlbeUpdateInput;
    where: IlbeWhereUniqueInput;
  }) => IlbePromise;
  updateManyIlbes: (args: {
    data: IlbeUpdateManyMutationInput;
    where?: IlbeWhereInput;
  }) => BatchPayloadPromise;
  upsertIlbe: (args: {
    where: IlbeWhereUniqueInput;
    create: IlbeCreateInput;
    update: IlbeUpdateInput;
  }) => IlbePromise;
  deleteIlbe: (where: IlbeWhereUniqueInput) => IlbePromise;
  deleteManyIlbes: (where?: IlbeWhereInput) => BatchPayloadPromise;
  createInstiz: (data: InstizCreateInput) => InstizPromise;
  updateInstiz: (args: {
    data: InstizUpdateInput;
    where: InstizWhereUniqueInput;
  }) => InstizPromise;
  updateManyInstizes: (args: {
    data: InstizUpdateManyMutationInput;
    where?: InstizWhereInput;
  }) => BatchPayloadPromise;
  upsertInstiz: (args: {
    where: InstizWhereUniqueInput;
    create: InstizCreateInput;
    update: InstizUpdateInput;
  }) => InstizPromise;
  deleteInstiz: (where: InstizWhereUniqueInput) => InstizPromise;
  deleteManyInstizes: (where?: InstizWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createPostLinks: (data: PostLinksCreateInput) => PostLinksPromise;
  updatePostLinks: (args: {
    data: PostLinksUpdateInput;
    where: PostLinksWhereUniqueInput;
  }) => PostLinksPromise;
  updateManyPostLinkses: (args: {
    data: PostLinksUpdateManyMutationInput;
    where?: PostLinksWhereInput;
  }) => BatchPayloadPromise;
  upsertPostLinks: (args: {
    where: PostLinksWhereUniqueInput;
    create: PostLinksCreateInput;
    update: PostLinksUpdateInput;
  }) => PostLinksPromise;
  deletePostLinks: (where: PostLinksWhereUniqueInput) => PostLinksPromise;
  deleteManyPostLinkses: (where?: PostLinksWhereInput) => BatchPayloadPromise;
  createPpompPu: (data: PpompPuCreateInput) => PpompPuPromise;
  updatePpompPu: (args: {
    data: PpompPuUpdateInput;
    where: PpompPuWhereUniqueInput;
  }) => PpompPuPromise;
  updateManyPpompPus: (args: {
    data: PpompPuUpdateManyMutationInput;
    where?: PpompPuWhereInput;
  }) => BatchPayloadPromise;
  upsertPpompPu: (args: {
    where: PpompPuWhereUniqueInput;
    create: PpompPuCreateInput;
    update: PpompPuUpdateInput;
  }) => PpompPuPromise;
  deletePpompPu: (where: PpompPuWhereUniqueInput) => PpompPuPromise;
  deleteManyPpompPus: (where?: PpompPuWhereInput) => BatchPayloadPromise;
  createRuliWeb: (data: RuliWebCreateInput) => RuliWebPromise;
  updateRuliWeb: (args: {
    data: RuliWebUpdateInput;
    where: RuliWebWhereUniqueInput;
  }) => RuliWebPromise;
  updateManyRuliWebs: (args: {
    data: RuliWebUpdateManyMutationInput;
    where?: RuliWebWhereInput;
  }) => BatchPayloadPromise;
  upsertRuliWeb: (args: {
    where: RuliWebWhereUniqueInput;
    create: RuliWebCreateInput;
    update: RuliWebUpdateInput;
  }) => RuliWebPromise;
  deleteRuliWeb: (where: RuliWebWhereUniqueInput) => RuliWebPromise;
  deleteManyRuliWebs: (where?: RuliWebWhereInput) => BatchPayloadPromise;
  createSLRClub: (data: SLRClubCreateInput) => SLRClubPromise;
  updateSLRClub: (args: {
    data: SLRClubUpdateInput;
    where: SLRClubWhereUniqueInput;
  }) => SLRClubPromise;
  updateManySLRClubs: (args: {
    data: SLRClubUpdateManyMutationInput;
    where?: SLRClubWhereInput;
  }) => BatchPayloadPromise;
  upsertSLRClub: (args: {
    where: SLRClubWhereUniqueInput;
    create: SLRClubCreateInput;
    update: SLRClubUpdateInput;
  }) => SLRClubPromise;
  deleteSLRClub: (where: SLRClubWhereUniqueInput) => SLRClubPromise;
  deleteManySLRClubs: (where?: SLRClubWhereInput) => BatchPayloadPromise;
  createSavedPosts: (data: SavedPostsCreateInput) => SavedPostsPromise;
  updateSavedPosts: (args: {
    data: SavedPostsUpdateInput;
    where: SavedPostsWhereUniqueInput;
  }) => SavedPostsPromise;
  updateManySavedPostses: (args: {
    data: SavedPostsUpdateManyMutationInput;
    where?: SavedPostsWhereInput;
  }) => BatchPayloadPromise;
  upsertSavedPosts: (args: {
    where: SavedPostsWhereUniqueInput;
    create: SavedPostsCreateInput;
    update: SavedPostsUpdateInput;
  }) => SavedPostsPromise;
  deleteSavedPosts: (where: SavedPostsWhereUniqueInput) => SavedPostsPromise;
  deleteManySavedPostses: (where?: SavedPostsWhereInput) => BatchPayloadPromise;
  createSortedPosts: (data: SortedPostsCreateInput) => SortedPostsPromise;
  updateSortedPosts: (args: {
    data: SortedPostsUpdateInput;
    where: SortedPostsWhereUniqueInput;
  }) => SortedPostsPromise;
  updateManySortedPostses: (args: {
    data: SortedPostsUpdateManyMutationInput;
    where?: SortedPostsWhereInput;
  }) => BatchPayloadPromise;
  upsertSortedPosts: (args: {
    where: SortedPostsWhereUniqueInput;
    create: SortedPostsCreateInput;
    update: SortedPostsUpdateInput;
  }) => SortedPostsPromise;
  deleteSortedPosts: (where: SortedPostsWhereUniqueInput) => SortedPostsPromise;
  deleteManySortedPostses: (
    where?: SortedPostsWhereInput
  ) => BatchPayloadPromise;
  createTheQoo: (data: TheQooCreateInput) => TheQooPromise;
  updateTheQoo: (args: {
    data: TheQooUpdateInput;
    where: TheQooWhereUniqueInput;
  }) => TheQooPromise;
  updateManyTheQoos: (args: {
    data: TheQooUpdateManyMutationInput;
    where?: TheQooWhereInput;
  }) => BatchPayloadPromise;
  upsertTheQoo: (args: {
    where: TheQooWhereUniqueInput;
    create: TheQooCreateInput;
    update: TheQooUpdateInput;
  }) => TheQooPromise;
  deleteTheQoo: (where: TheQooWhereUniqueInput) => TheQooPromise;
  deleteManyTheQoos: (where?: TheQooWhereInput) => BatchPayloadPromise;
  createTodayHumor: (data: TodayHumorCreateInput) => TodayHumorPromise;
  updateTodayHumor: (args: {
    data: TodayHumorUpdateInput;
    where: TodayHumorWhereUniqueInput;
  }) => TodayHumorPromise;
  updateManyTodayHumors: (args: {
    data: TodayHumorUpdateManyMutationInput;
    where?: TodayHumorWhereInput;
  }) => BatchPayloadPromise;
  upsertTodayHumor: (args: {
    where: TodayHumorWhereUniqueInput;
    create: TodayHumorCreateInput;
    update: TodayHumorUpdateInput;
  }) => TodayHumorPromise;
  deleteTodayHumor: (where: TodayHumorWhereUniqueInput) => TodayHumorPromise;
  deleteManyTodayHumors: (where?: TodayHumorWhereInput) => BatchPayloadPromise;
  createpreProcessedPost: (
    data: preProcessedPostCreateInput
  ) => preProcessedPostPromise;
  updatepreProcessedPost: (args: {
    data: preProcessedPostUpdateInput;
    where: preProcessedPostWhereUniqueInput;
  }) => preProcessedPostPromise;
  updateManypreProcessedPosts: (args: {
    data: preProcessedPostUpdateManyMutationInput;
    where?: preProcessedPostWhereInput;
  }) => BatchPayloadPromise;
  upsertpreProcessedPost: (args: {
    where: preProcessedPostWhereUniqueInput;
    create: preProcessedPostCreateInput;
    update: preProcessedPostUpdateInput;
  }) => preProcessedPostPromise;
  deletepreProcessedPost: (
    where: preProcessedPostWhereUniqueInput
  ) => preProcessedPostPromise;
  deleteManypreProcessedPosts: (
    where?: preProcessedPostWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bobae: (
    where?: BobaeSubscriptionWhereInput
  ) => BobaeSubscriptionPayloadSubscription;
  bullpen: (
    where?: BullpenSubscriptionWhereInput
  ) => BullpenSubscriptionPayloadSubscription;
  clien: (
    where?: ClienSubscriptionWhereInput
  ) => ClienSubscriptionPayloadSubscription;
  cook: (
    where?: CookSubscriptionWhereInput
  ) => CookSubscriptionPayloadSubscription;
  dogDrip: (
    where?: DogDripSubscriptionWhereInput
  ) => DogDripSubscriptionPayloadSubscription;
  errorLog: (
    where?: ErrorLogSubscriptionWhereInput
  ) => ErrorLogSubscriptionPayloadSubscription;
  etoland: (
    where?: EtolandSubscriptionWhereInput
  ) => EtolandSubscriptionPayloadSubscription;
  fmKorea: (
    where?: FmKoreaSubscriptionWhereInput
  ) => FmKoreaSubscriptionPayloadSubscription;
  gasengi: (
    where?: GasengiSubscriptionWhereInput
  ) => GasengiSubscriptionPayloadSubscription;
  humorUniv: (
    where?: HumorUnivSubscriptionWhereInput
  ) => HumorUnivSubscriptionPayloadSubscription;
  ilbe: (
    where?: IlbeSubscriptionWhereInput
  ) => IlbeSubscriptionPayloadSubscription;
  instiz: (
    where?: InstizSubscriptionWhereInput
  ) => InstizSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  postLinks: (
    where?: PostLinksSubscriptionWhereInput
  ) => PostLinksSubscriptionPayloadSubscription;
  ppompPu: (
    where?: PpompPuSubscriptionWhereInput
  ) => PpompPuSubscriptionPayloadSubscription;
  ruliWeb: (
    where?: RuliWebSubscriptionWhereInput
  ) => RuliWebSubscriptionPayloadSubscription;
  sLRClub: (
    where?: SLRClubSubscriptionWhereInput
  ) => SLRClubSubscriptionPayloadSubscription;
  savedPosts: (
    where?: SavedPostsSubscriptionWhereInput
  ) => SavedPostsSubscriptionPayloadSubscription;
  sortedPosts: (
    where?: SortedPostsSubscriptionWhereInput
  ) => SortedPostsSubscriptionPayloadSubscription;
  theQoo: (
    where?: TheQooSubscriptionWhereInput
  ) => TheQooSubscriptionPayloadSubscription;
  todayHumor: (
    where?: TodayHumorSubscriptionWhereInput
  ) => TodayHumorSubscriptionPayloadSubscription;
  preProcessedPost: (
    where?: preProcessedPostSubscriptionWhereInput
  ) => preProcessedPostSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BobaeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type BullpenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ClienOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type DogDripOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ErrorLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "from_ASC"
  | "from_DESC"
  | "isRead_ASC"
  | "isRead_DESC"
  | "type_ASC"
  | "type_DESC"
  | "link_ASC"
  | "link_DESC";

export type EtolandOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type FmKoreaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GasengiOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type HumorUnivOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "from_ASC"
  | "from_DESC"
  | "isRead_ASC"
  | "isRead_DESC"
  | "type_ASC"
  | "type_DESC";

export type IlbeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type InstizOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostLinksOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PpompPuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type RuliWebOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SLRClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SavedPostsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SortedPostsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type TheQooOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type TodayHumorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type preProcessedPostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "author_ASC"
  | "author_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC"
  | "hitCount_ASC"
  | "hitCount_DESC"
  | "link_ASC"
  | "link_DESC"
  | "from_ASC"
  | "from_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BobaeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BobaeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BobaeWhereInput[] | BobaeWhereInput>;
  OR?: Maybe<BobaeWhereInput[] | BobaeWhereInput>;
  NOT?: Maybe<BobaeWhereInput[] | BobaeWhereInput>;
}

export type BullpenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BullpenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BullpenWhereInput[] | BullpenWhereInput>;
  OR?: Maybe<BullpenWhereInput[] | BullpenWhereInput>;
  NOT?: Maybe<BullpenWhereInput[] | BullpenWhereInput>;
}

export type ClienWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClienWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClienWhereInput[] | ClienWhereInput>;
  OR?: Maybe<ClienWhereInput[] | ClienWhereInput>;
  NOT?: Maybe<ClienWhereInput[] | ClienWhereInput>;
}

export type CookWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CookWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CookWhereInput[] | CookWhereInput>;
  OR?: Maybe<CookWhereInput[] | CookWhereInput>;
  NOT?: Maybe<CookWhereInput[] | CookWhereInput>;
}

export type DogDripWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DogDripWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DogDripWhereInput[] | DogDripWhereInput>;
  OR?: Maybe<DogDripWhereInput[] | DogDripWhereInput>;
  NOT?: Maybe<DogDripWhereInput[] | DogDripWhereInput>;
}

export type ErrorLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ErrorLogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  isRead?: Maybe<Boolean>;
  isRead_not?: Maybe<Boolean>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  AND?: Maybe<ErrorLogWhereInput[] | ErrorLogWhereInput>;
  OR?: Maybe<ErrorLogWhereInput[] | ErrorLogWhereInput>;
  NOT?: Maybe<ErrorLogWhereInput[] | ErrorLogWhereInput>;
}

export type EtolandWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EtolandWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EtolandWhereInput[] | EtolandWhereInput>;
  OR?: Maybe<EtolandWhereInput[] | EtolandWhereInput>;
  NOT?: Maybe<EtolandWhereInput[] | EtolandWhereInput>;
}

export type FmKoreaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FmKoreaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FmKoreaWhereInput[] | FmKoreaWhereInput>;
  OR?: Maybe<FmKoreaWhereInput[] | FmKoreaWhereInput>;
  NOT?: Maybe<FmKoreaWhereInput[] | FmKoreaWhereInput>;
}

export type GasengiWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GasengiWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GasengiWhereInput[] | GasengiWhereInput>;
  OR?: Maybe<GasengiWhereInput[] | GasengiWhereInput>;
  NOT?: Maybe<GasengiWhereInput[] | GasengiWhereInput>;
}

export type HumorUnivWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HumorUnivWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  isRead?: Maybe<Boolean>;
  isRead_not?: Maybe<Boolean>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<HumorUnivWhereInput[] | HumorUnivWhereInput>;
  OR?: Maybe<HumorUnivWhereInput[] | HumorUnivWhereInput>;
  NOT?: Maybe<HumorUnivWhereInput[] | HumorUnivWhereInput>;
}

export type IlbeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface IlbeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IlbeWhereInput[] | IlbeWhereInput>;
  OR?: Maybe<IlbeWhereInput[] | IlbeWhereInput>;
  NOT?: Maybe<IlbeWhereInput[] | IlbeWhereInput>;
}

export type InstizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface InstizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InstizWhereInput[] | InstizWhereInput>;
  OR?: Maybe<InstizWhereInput[] | InstizWhereInput>;
  NOT?: Maybe<InstizWhereInput[] | InstizWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export type PostLinksWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostLinksWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostLinksWhereInput[] | PostLinksWhereInput>;
  OR?: Maybe<PostLinksWhereInput[] | PostLinksWhereInput>;
  NOT?: Maybe<PostLinksWhereInput[] | PostLinksWhereInput>;
}

export type PpompPuWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PpompPuWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PpompPuWhereInput[] | PpompPuWhereInput>;
  OR?: Maybe<PpompPuWhereInput[] | PpompPuWhereInput>;
  NOT?: Maybe<PpompPuWhereInput[] | PpompPuWhereInput>;
}

export type RuliWebWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RuliWebWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RuliWebWhereInput[] | RuliWebWhereInput>;
  OR?: Maybe<RuliWebWhereInput[] | RuliWebWhereInput>;
  NOT?: Maybe<RuliWebWhereInput[] | RuliWebWhereInput>;
}

export type SLRClubWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SLRClubWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SLRClubWhereInput[] | SLRClubWhereInput>;
  OR?: Maybe<SLRClubWhereInput[] | SLRClubWhereInput>;
  NOT?: Maybe<SLRClubWhereInput[] | SLRClubWhereInput>;
}

export type SavedPostsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SavedPostsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SavedPostsWhereInput[] | SavedPostsWhereInput>;
  OR?: Maybe<SavedPostsWhereInput[] | SavedPostsWhereInput>;
  NOT?: Maybe<SavedPostsWhereInput[] | SavedPostsWhereInput>;
}

export type SortedPostsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SortedPostsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SortedPostsWhereInput[] | SortedPostsWhereInput>;
  OR?: Maybe<SortedPostsWhereInput[] | SortedPostsWhereInput>;
  NOT?: Maybe<SortedPostsWhereInput[] | SortedPostsWhereInput>;
}

export type TheQooWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TheQooWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TheQooWhereInput[] | TheQooWhereInput>;
  OR?: Maybe<TheQooWhereInput[] | TheQooWhereInput>;
  NOT?: Maybe<TheQooWhereInput[] | TheQooWhereInput>;
}

export type TodayHumorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TodayHumorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TodayHumorWhereInput[] | TodayHumorWhereInput>;
  OR?: Maybe<TodayHumorWhereInput[] | TodayHumorWhereInput>;
  NOT?: Maybe<TodayHumorWhereInput[] | TodayHumorWhereInput>;
}

export type preProcessedPostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface preProcessedPostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<String>;
  registeredAt_not?: Maybe<String>;
  registeredAt_in?: Maybe<String[] | String>;
  registeredAt_not_in?: Maybe<String[] | String>;
  registeredAt_lt?: Maybe<String>;
  registeredAt_lte?: Maybe<String>;
  registeredAt_gt?: Maybe<String>;
  registeredAt_gte?: Maybe<String>;
  registeredAt_contains?: Maybe<String>;
  registeredAt_not_contains?: Maybe<String>;
  registeredAt_starts_with?: Maybe<String>;
  registeredAt_not_starts_with?: Maybe<String>;
  registeredAt_ends_with?: Maybe<String>;
  registeredAt_not_ends_with?: Maybe<String>;
  hitCount?: Maybe<Int>;
  hitCount_not?: Maybe<Int>;
  hitCount_in?: Maybe<Int[] | Int>;
  hitCount_not_in?: Maybe<Int[] | Int>;
  hitCount_lt?: Maybe<Int>;
  hitCount_lte?: Maybe<Int>;
  hitCount_gt?: Maybe<Int>;
  hitCount_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<preProcessedPostWhereInput[] | preProcessedPostWhereInput>;
  OR?: Maybe<preProcessedPostWhereInput[] | preProcessedPostWhereInput>;
  NOT?: Maybe<preProcessedPostWhereInput[] | preProcessedPostWhereInput>;
}

export interface BobaeCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface BobaeUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BobaeUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BullpenCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface BullpenUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BullpenUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface ClienCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface ClienUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface ClienUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface CookCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface CookUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface CookUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface DogDripCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface DogDripUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface DogDripUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface ErrorLogCreateInput {
  id?: Maybe<ID_Input>;
  reason: String;
  from: String;
  isRead: Boolean;
  type: String;
  link?: Maybe<String>;
}

export interface ErrorLogUpdateInput {
  reason?: Maybe<String>;
  from?: Maybe<String>;
  isRead?: Maybe<Boolean>;
  type?: Maybe<String>;
  link?: Maybe<String>;
}

export interface ErrorLogUpdateManyMutationInput {
  reason?: Maybe<String>;
  from?: Maybe<String>;
  isRead?: Maybe<Boolean>;
  type?: Maybe<String>;
  link?: Maybe<String>;
}

export interface EtolandCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface EtolandUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface EtolandUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface FmKoreaCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface FmKoreaUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface FmKoreaUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface GasengiCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface GasengiUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface GasengiUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface HumorUnivCreateInput {
  id?: Maybe<ID_Input>;
  reason: String;
  from: String;
  isRead: Boolean;
  type: String;
}

export interface HumorUnivUpdateInput {
  reason?: Maybe<String>;
  from?: Maybe<String>;
  isRead?: Maybe<Boolean>;
  type?: Maybe<String>;
}

export interface HumorUnivUpdateManyMutationInput {
  reason?: Maybe<String>;
  from?: Maybe<String>;
  isRead?: Maybe<Boolean>;
  type?: Maybe<String>;
}

export interface IlbeCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface IlbeUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface IlbeUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface InstizCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface InstizUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface InstizUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface PostLinksCreateInput {
  id?: Maybe<ID_Input>;
  link: String;
  from: String;
  hitCount?: Maybe<Int>;
}

export interface PostLinksUpdateInput {
  link?: Maybe<String>;
  from?: Maybe<String>;
  hitCount?: Maybe<Int>;
}

export interface PostLinksUpdateManyMutationInput {
  link?: Maybe<String>;
  from?: Maybe<String>;
  hitCount?: Maybe<Int>;
}

export interface PpompPuCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface PpompPuUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface PpompPuUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface RuliWebCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface RuliWebUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface RuliWebUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface SLRClubCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface SLRClubUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface SLRClubUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface SavedPostsCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount: Int;
  link: String;
  from: String;
}

export interface SavedPostsUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface SavedPostsUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface SortedPostsCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount: Int;
  link: String;
  from: String;
}

export interface SortedPostsUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface SortedPostsUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface TheQooCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface TheQooUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface TheQooUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface TodayHumorCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link: String;
  from: String;
}

export interface TodayHumorUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface TodayHumorUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface preProcessedPostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount: Int;
  link: String;
  from: String;
}

export interface preProcessedPostUpdateInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface preProcessedPostUpdateManyMutationInput {
  title?: Maybe<String>;
  author?: Maybe<String>;
  registeredAt?: Maybe<String>;
  hitCount?: Maybe<Int>;
  link?: Maybe<String>;
  from?: Maybe<String>;
}

export interface BobaeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BobaeWhereInput>;
  AND?: Maybe<BobaeSubscriptionWhereInput[] | BobaeSubscriptionWhereInput>;
  OR?: Maybe<BobaeSubscriptionWhereInput[] | BobaeSubscriptionWhereInput>;
  NOT?: Maybe<BobaeSubscriptionWhereInput[] | BobaeSubscriptionWhereInput>;
}

export interface BullpenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BullpenWhereInput>;
  AND?: Maybe<BullpenSubscriptionWhereInput[] | BullpenSubscriptionWhereInput>;
  OR?: Maybe<BullpenSubscriptionWhereInput[] | BullpenSubscriptionWhereInput>;
  NOT?: Maybe<BullpenSubscriptionWhereInput[] | BullpenSubscriptionWhereInput>;
}

export interface ClienSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClienWhereInput>;
  AND?: Maybe<ClienSubscriptionWhereInput[] | ClienSubscriptionWhereInput>;
  OR?: Maybe<ClienSubscriptionWhereInput[] | ClienSubscriptionWhereInput>;
  NOT?: Maybe<ClienSubscriptionWhereInput[] | ClienSubscriptionWhereInput>;
}

export interface CookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CookWhereInput>;
  AND?: Maybe<CookSubscriptionWhereInput[] | CookSubscriptionWhereInput>;
  OR?: Maybe<CookSubscriptionWhereInput[] | CookSubscriptionWhereInput>;
  NOT?: Maybe<CookSubscriptionWhereInput[] | CookSubscriptionWhereInput>;
}

export interface DogDripSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DogDripWhereInput>;
  AND?: Maybe<DogDripSubscriptionWhereInput[] | DogDripSubscriptionWhereInput>;
  OR?: Maybe<DogDripSubscriptionWhereInput[] | DogDripSubscriptionWhereInput>;
  NOT?: Maybe<DogDripSubscriptionWhereInput[] | DogDripSubscriptionWhereInput>;
}

export interface ErrorLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ErrorLogWhereInput>;
  AND?: Maybe<
    ErrorLogSubscriptionWhereInput[] | ErrorLogSubscriptionWhereInput
  >;
  OR?: Maybe<ErrorLogSubscriptionWhereInput[] | ErrorLogSubscriptionWhereInput>;
  NOT?: Maybe<
    ErrorLogSubscriptionWhereInput[] | ErrorLogSubscriptionWhereInput
  >;
}

export interface EtolandSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EtolandWhereInput>;
  AND?: Maybe<EtolandSubscriptionWhereInput[] | EtolandSubscriptionWhereInput>;
  OR?: Maybe<EtolandSubscriptionWhereInput[] | EtolandSubscriptionWhereInput>;
  NOT?: Maybe<EtolandSubscriptionWhereInput[] | EtolandSubscriptionWhereInput>;
}

export interface FmKoreaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FmKoreaWhereInput>;
  AND?: Maybe<FmKoreaSubscriptionWhereInput[] | FmKoreaSubscriptionWhereInput>;
  OR?: Maybe<FmKoreaSubscriptionWhereInput[] | FmKoreaSubscriptionWhereInput>;
  NOT?: Maybe<FmKoreaSubscriptionWhereInput[] | FmKoreaSubscriptionWhereInput>;
}

export interface GasengiSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GasengiWhereInput>;
  AND?: Maybe<GasengiSubscriptionWhereInput[] | GasengiSubscriptionWhereInput>;
  OR?: Maybe<GasengiSubscriptionWhereInput[] | GasengiSubscriptionWhereInput>;
  NOT?: Maybe<GasengiSubscriptionWhereInput[] | GasengiSubscriptionWhereInput>;
}

export interface HumorUnivSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HumorUnivWhereInput>;
  AND?: Maybe<
    HumorUnivSubscriptionWhereInput[] | HumorUnivSubscriptionWhereInput
  >;
  OR?: Maybe<
    HumorUnivSubscriptionWhereInput[] | HumorUnivSubscriptionWhereInput
  >;
  NOT?: Maybe<
    HumorUnivSubscriptionWhereInput[] | HumorUnivSubscriptionWhereInput
  >;
}

export interface IlbeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IlbeWhereInput>;
  AND?: Maybe<IlbeSubscriptionWhereInput[] | IlbeSubscriptionWhereInput>;
  OR?: Maybe<IlbeSubscriptionWhereInput[] | IlbeSubscriptionWhereInput>;
  NOT?: Maybe<IlbeSubscriptionWhereInput[] | IlbeSubscriptionWhereInput>;
}

export interface InstizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InstizWhereInput>;
  AND?: Maybe<InstizSubscriptionWhereInput[] | InstizSubscriptionWhereInput>;
  OR?: Maybe<InstizSubscriptionWhereInput[] | InstizSubscriptionWhereInput>;
  NOT?: Maybe<InstizSubscriptionWhereInput[] | InstizSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PostLinksSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostLinksWhereInput>;
  AND?: Maybe<
    PostLinksSubscriptionWhereInput[] | PostLinksSubscriptionWhereInput
  >;
  OR?: Maybe<
    PostLinksSubscriptionWhereInput[] | PostLinksSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PostLinksSubscriptionWhereInput[] | PostLinksSubscriptionWhereInput
  >;
}

export interface PpompPuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PpompPuWhereInput>;
  AND?: Maybe<PpompPuSubscriptionWhereInput[] | PpompPuSubscriptionWhereInput>;
  OR?: Maybe<PpompPuSubscriptionWhereInput[] | PpompPuSubscriptionWhereInput>;
  NOT?: Maybe<PpompPuSubscriptionWhereInput[] | PpompPuSubscriptionWhereInput>;
}

export interface RuliWebSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RuliWebWhereInput>;
  AND?: Maybe<RuliWebSubscriptionWhereInput[] | RuliWebSubscriptionWhereInput>;
  OR?: Maybe<RuliWebSubscriptionWhereInput[] | RuliWebSubscriptionWhereInput>;
  NOT?: Maybe<RuliWebSubscriptionWhereInput[] | RuliWebSubscriptionWhereInput>;
}

export interface SLRClubSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SLRClubWhereInput>;
  AND?: Maybe<SLRClubSubscriptionWhereInput[] | SLRClubSubscriptionWhereInput>;
  OR?: Maybe<SLRClubSubscriptionWhereInput[] | SLRClubSubscriptionWhereInput>;
  NOT?: Maybe<SLRClubSubscriptionWhereInput[] | SLRClubSubscriptionWhereInput>;
}

export interface SavedPostsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SavedPostsWhereInput>;
  AND?: Maybe<
    SavedPostsSubscriptionWhereInput[] | SavedPostsSubscriptionWhereInput
  >;
  OR?: Maybe<
    SavedPostsSubscriptionWhereInput[] | SavedPostsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SavedPostsSubscriptionWhereInput[] | SavedPostsSubscriptionWhereInput
  >;
}

export interface SortedPostsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SortedPostsWhereInput>;
  AND?: Maybe<
    SortedPostsSubscriptionWhereInput[] | SortedPostsSubscriptionWhereInput
  >;
  OR?: Maybe<
    SortedPostsSubscriptionWhereInput[] | SortedPostsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SortedPostsSubscriptionWhereInput[] | SortedPostsSubscriptionWhereInput
  >;
}

export interface TheQooSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TheQooWhereInput>;
  AND?: Maybe<TheQooSubscriptionWhereInput[] | TheQooSubscriptionWhereInput>;
  OR?: Maybe<TheQooSubscriptionWhereInput[] | TheQooSubscriptionWhereInput>;
  NOT?: Maybe<TheQooSubscriptionWhereInput[] | TheQooSubscriptionWhereInput>;
}

export interface TodayHumorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TodayHumorWhereInput>;
  AND?: Maybe<
    TodayHumorSubscriptionWhereInput[] | TodayHumorSubscriptionWhereInput
  >;
  OR?: Maybe<
    TodayHumorSubscriptionWhereInput[] | TodayHumorSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TodayHumorSubscriptionWhereInput[] | TodayHumorSubscriptionWhereInput
  >;
}

export interface preProcessedPostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<preProcessedPostWhereInput>;
  AND?: Maybe<
    | preProcessedPostSubscriptionWhereInput[]
    | preProcessedPostSubscriptionWhereInput
  >;
  OR?: Maybe<
    | preProcessedPostSubscriptionWhereInput[]
    | preProcessedPostSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | preProcessedPostSubscriptionWhereInput[]
    | preProcessedPostSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Bobae {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BobaePromise extends Promise<Bobae>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BobaeSubscription
  extends Promise<AsyncIterator<Bobae>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BobaeNullablePromise
  extends Promise<Bobae | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BobaeConnection {
  pageInfo: PageInfo;
  edges: BobaeEdge[];
}

export interface BobaeConnectionPromise
  extends Promise<BobaeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BobaeEdge>>() => T;
  aggregate: <T = AggregateBobaePromise>() => T;
}

export interface BobaeConnectionSubscription
  extends Promise<AsyncIterator<BobaeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BobaeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBobaeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BobaeEdge {
  node: Bobae;
  cursor: String;
}

export interface BobaeEdgePromise extends Promise<BobaeEdge>, Fragmentable {
  node: <T = BobaePromise>() => T;
  cursor: () => Promise<String>;
}

export interface BobaeEdgeSubscription
  extends Promise<AsyncIterator<BobaeEdge>>,
    Fragmentable {
  node: <T = BobaeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBobae {
  count: Int;
}

export interface AggregateBobaePromise
  extends Promise<AggregateBobae>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBobaeSubscription
  extends Promise<AsyncIterator<AggregateBobae>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Bullpen {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BullpenPromise extends Promise<Bullpen>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BullpenSubscription
  extends Promise<AsyncIterator<Bullpen>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BullpenNullablePromise
  extends Promise<Bullpen | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BullpenConnection {
  pageInfo: PageInfo;
  edges: BullpenEdge[];
}

export interface BullpenConnectionPromise
  extends Promise<BullpenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BullpenEdge>>() => T;
  aggregate: <T = AggregateBullpenPromise>() => T;
}

export interface BullpenConnectionSubscription
  extends Promise<AsyncIterator<BullpenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BullpenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBullpenSubscription>() => T;
}

export interface BullpenEdge {
  node: Bullpen;
  cursor: String;
}

export interface BullpenEdgePromise extends Promise<BullpenEdge>, Fragmentable {
  node: <T = BullpenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BullpenEdgeSubscription
  extends Promise<AsyncIterator<BullpenEdge>>,
    Fragmentable {
  node: <T = BullpenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBullpen {
  count: Int;
}

export interface AggregateBullpenPromise
  extends Promise<AggregateBullpen>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBullpenSubscription
  extends Promise<AsyncIterator<AggregateBullpen>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Clien {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface ClienPromise extends Promise<Clien>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClienSubscription
  extends Promise<AsyncIterator<Clien>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClienNullablePromise
  extends Promise<Clien | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClienConnection {
  pageInfo: PageInfo;
  edges: ClienEdge[];
}

export interface ClienConnectionPromise
  extends Promise<ClienConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClienEdge>>() => T;
  aggregate: <T = AggregateClienPromise>() => T;
}

export interface ClienConnectionSubscription
  extends Promise<AsyncIterator<ClienConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClienEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClienSubscription>() => T;
}

export interface ClienEdge {
  node: Clien;
  cursor: String;
}

export interface ClienEdgePromise extends Promise<ClienEdge>, Fragmentable {
  node: <T = ClienPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClienEdgeSubscription
  extends Promise<AsyncIterator<ClienEdge>>,
    Fragmentable {
  node: <T = ClienSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClien {
  count: Int;
}

export interface AggregateClienPromise
  extends Promise<AggregateClien>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClienSubscription
  extends Promise<AsyncIterator<AggregateClien>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cook {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface CookPromise extends Promise<Cook>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CookSubscription
  extends Promise<AsyncIterator<Cook>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CookNullablePromise
  extends Promise<Cook | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CookConnection {
  pageInfo: PageInfo;
  edges: CookEdge[];
}

export interface CookConnectionPromise
  extends Promise<CookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CookEdge>>() => T;
  aggregate: <T = AggregateCookPromise>() => T;
}

export interface CookConnectionSubscription
  extends Promise<AsyncIterator<CookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCookSubscription>() => T;
}

export interface CookEdge {
  node: Cook;
  cursor: String;
}

export interface CookEdgePromise extends Promise<CookEdge>, Fragmentable {
  node: <T = CookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CookEdgeSubscription
  extends Promise<AsyncIterator<CookEdge>>,
    Fragmentable {
  node: <T = CookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCook {
  count: Int;
}

export interface AggregateCookPromise
  extends Promise<AggregateCook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCookSubscription
  extends Promise<AsyncIterator<AggregateCook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DogDrip {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface DogDripPromise extends Promise<DogDrip>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DogDripSubscription
  extends Promise<AsyncIterator<DogDrip>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DogDripNullablePromise
  extends Promise<DogDrip | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DogDripConnection {
  pageInfo: PageInfo;
  edges: DogDripEdge[];
}

export interface DogDripConnectionPromise
  extends Promise<DogDripConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DogDripEdge>>() => T;
  aggregate: <T = AggregateDogDripPromise>() => T;
}

export interface DogDripConnectionSubscription
  extends Promise<AsyncIterator<DogDripConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DogDripEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDogDripSubscription>() => T;
}

export interface DogDripEdge {
  node: DogDrip;
  cursor: String;
}

export interface DogDripEdgePromise extends Promise<DogDripEdge>, Fragmentable {
  node: <T = DogDripPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DogDripEdgeSubscription
  extends Promise<AsyncIterator<DogDripEdge>>,
    Fragmentable {
  node: <T = DogDripSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDogDrip {
  count: Int;
}

export interface AggregateDogDripPromise
  extends Promise<AggregateDogDrip>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDogDripSubscription
  extends Promise<AsyncIterator<AggregateDogDrip>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ErrorLog {
  id: ID_Output;
  createdAt: DateTimeOutput;
  reason: String;
  from: String;
  isRead: Boolean;
  type: String;
  link?: String;
}

export interface ErrorLogPromise extends Promise<ErrorLog>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  reason: () => Promise<String>;
  from: () => Promise<String>;
  isRead: () => Promise<Boolean>;
  type: () => Promise<String>;
  link: () => Promise<String>;
}

export interface ErrorLogSubscription
  extends Promise<AsyncIterator<ErrorLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  reason: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
}

export interface ErrorLogNullablePromise
  extends Promise<ErrorLog | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  reason: () => Promise<String>;
  from: () => Promise<String>;
  isRead: () => Promise<Boolean>;
  type: () => Promise<String>;
  link: () => Promise<String>;
}

export interface ErrorLogConnection {
  pageInfo: PageInfo;
  edges: ErrorLogEdge[];
}

export interface ErrorLogConnectionPromise
  extends Promise<ErrorLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ErrorLogEdge>>() => T;
  aggregate: <T = AggregateErrorLogPromise>() => T;
}

export interface ErrorLogConnectionSubscription
  extends Promise<AsyncIterator<ErrorLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ErrorLogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateErrorLogSubscription>() => T;
}

export interface ErrorLogEdge {
  node: ErrorLog;
  cursor: String;
}

export interface ErrorLogEdgePromise
  extends Promise<ErrorLogEdge>,
    Fragmentable {
  node: <T = ErrorLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ErrorLogEdgeSubscription
  extends Promise<AsyncIterator<ErrorLogEdge>>,
    Fragmentable {
  node: <T = ErrorLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateErrorLog {
  count: Int;
}

export interface AggregateErrorLogPromise
  extends Promise<AggregateErrorLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateErrorLogSubscription
  extends Promise<AsyncIterator<AggregateErrorLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Etoland {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface EtolandPromise extends Promise<Etoland>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EtolandSubscription
  extends Promise<AsyncIterator<Etoland>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EtolandNullablePromise
  extends Promise<Etoland | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EtolandConnection {
  pageInfo: PageInfo;
  edges: EtolandEdge[];
}

export interface EtolandConnectionPromise
  extends Promise<EtolandConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EtolandEdge>>() => T;
  aggregate: <T = AggregateEtolandPromise>() => T;
}

export interface EtolandConnectionSubscription
  extends Promise<AsyncIterator<EtolandConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EtolandEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEtolandSubscription>() => T;
}

export interface EtolandEdge {
  node: Etoland;
  cursor: String;
}

export interface EtolandEdgePromise extends Promise<EtolandEdge>, Fragmentable {
  node: <T = EtolandPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EtolandEdgeSubscription
  extends Promise<AsyncIterator<EtolandEdge>>,
    Fragmentable {
  node: <T = EtolandSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEtoland {
  count: Int;
}

export interface AggregateEtolandPromise
  extends Promise<AggregateEtoland>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEtolandSubscription
  extends Promise<AsyncIterator<AggregateEtoland>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FmKorea {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface FmKoreaPromise extends Promise<FmKorea>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FmKoreaSubscription
  extends Promise<AsyncIterator<FmKorea>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FmKoreaNullablePromise
  extends Promise<FmKorea | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FmKoreaConnection {
  pageInfo: PageInfo;
  edges: FmKoreaEdge[];
}

export interface FmKoreaConnectionPromise
  extends Promise<FmKoreaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FmKoreaEdge>>() => T;
  aggregate: <T = AggregateFmKoreaPromise>() => T;
}

export interface FmKoreaConnectionSubscription
  extends Promise<AsyncIterator<FmKoreaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FmKoreaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFmKoreaSubscription>() => T;
}

export interface FmKoreaEdge {
  node: FmKorea;
  cursor: String;
}

export interface FmKoreaEdgePromise extends Promise<FmKoreaEdge>, Fragmentable {
  node: <T = FmKoreaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FmKoreaEdgeSubscription
  extends Promise<AsyncIterator<FmKoreaEdge>>,
    Fragmentable {
  node: <T = FmKoreaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFmKorea {
  count: Int;
}

export interface AggregateFmKoreaPromise
  extends Promise<AggregateFmKorea>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFmKoreaSubscription
  extends Promise<AsyncIterator<AggregateFmKorea>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Gasengi {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface GasengiPromise extends Promise<Gasengi>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GasengiSubscription
  extends Promise<AsyncIterator<Gasengi>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GasengiNullablePromise
  extends Promise<Gasengi | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GasengiConnection {
  pageInfo: PageInfo;
  edges: GasengiEdge[];
}

export interface GasengiConnectionPromise
  extends Promise<GasengiConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GasengiEdge>>() => T;
  aggregate: <T = AggregateGasengiPromise>() => T;
}

export interface GasengiConnectionSubscription
  extends Promise<AsyncIterator<GasengiConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GasengiEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGasengiSubscription>() => T;
}

export interface GasengiEdge {
  node: Gasengi;
  cursor: String;
}

export interface GasengiEdgePromise extends Promise<GasengiEdge>, Fragmentable {
  node: <T = GasengiPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GasengiEdgeSubscription
  extends Promise<AsyncIterator<GasengiEdge>>,
    Fragmentable {
  node: <T = GasengiSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGasengi {
  count: Int;
}

export interface AggregateGasengiPromise
  extends Promise<AggregateGasengi>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGasengiSubscription
  extends Promise<AsyncIterator<AggregateGasengi>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HumorUniv {
  id: ID_Output;
  createdAt: DateTimeOutput;
  reason: String;
  from: String;
  isRead: Boolean;
  type: String;
}

export interface HumorUnivPromise extends Promise<HumorUniv>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  reason: () => Promise<String>;
  from: () => Promise<String>;
  isRead: () => Promise<Boolean>;
  type: () => Promise<String>;
}

export interface HumorUnivSubscription
  extends Promise<AsyncIterator<HumorUniv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  reason: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface HumorUnivNullablePromise
  extends Promise<HumorUniv | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  reason: () => Promise<String>;
  from: () => Promise<String>;
  isRead: () => Promise<Boolean>;
  type: () => Promise<String>;
}

export interface HumorUnivConnection {
  pageInfo: PageInfo;
  edges: HumorUnivEdge[];
}

export interface HumorUnivConnectionPromise
  extends Promise<HumorUnivConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HumorUnivEdge>>() => T;
  aggregate: <T = AggregateHumorUnivPromise>() => T;
}

export interface HumorUnivConnectionSubscription
  extends Promise<AsyncIterator<HumorUnivConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HumorUnivEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHumorUnivSubscription>() => T;
}

export interface HumorUnivEdge {
  node: HumorUniv;
  cursor: String;
}

export interface HumorUnivEdgePromise
  extends Promise<HumorUnivEdge>,
    Fragmentable {
  node: <T = HumorUnivPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HumorUnivEdgeSubscription
  extends Promise<AsyncIterator<HumorUnivEdge>>,
    Fragmentable {
  node: <T = HumorUnivSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHumorUniv {
  count: Int;
}

export interface AggregateHumorUnivPromise
  extends Promise<AggregateHumorUniv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHumorUnivSubscription
  extends Promise<AsyncIterator<AggregateHumorUniv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ilbe {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface IlbePromise extends Promise<Ilbe>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IlbeSubscription
  extends Promise<AsyncIterator<Ilbe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IlbeNullablePromise
  extends Promise<Ilbe | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IlbeConnection {
  pageInfo: PageInfo;
  edges: IlbeEdge[];
}

export interface IlbeConnectionPromise
  extends Promise<IlbeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IlbeEdge>>() => T;
  aggregate: <T = AggregateIlbePromise>() => T;
}

export interface IlbeConnectionSubscription
  extends Promise<AsyncIterator<IlbeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IlbeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIlbeSubscription>() => T;
}

export interface IlbeEdge {
  node: Ilbe;
  cursor: String;
}

export interface IlbeEdgePromise extends Promise<IlbeEdge>, Fragmentable {
  node: <T = IlbePromise>() => T;
  cursor: () => Promise<String>;
}

export interface IlbeEdgeSubscription
  extends Promise<AsyncIterator<IlbeEdge>>,
    Fragmentable {
  node: <T = IlbeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIlbe {
  count: Int;
}

export interface AggregateIlbePromise
  extends Promise<AggregateIlbe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIlbeSubscription
  extends Promise<AsyncIterator<AggregateIlbe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Instiz {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface InstizPromise extends Promise<Instiz>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface InstizSubscription
  extends Promise<AsyncIterator<Instiz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InstizNullablePromise
  extends Promise<Instiz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface InstizConnection {
  pageInfo: PageInfo;
  edges: InstizEdge[];
}

export interface InstizConnectionPromise
  extends Promise<InstizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InstizEdge>>() => T;
  aggregate: <T = AggregateInstizPromise>() => T;
}

export interface InstizConnectionSubscription
  extends Promise<AsyncIterator<InstizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InstizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInstizSubscription>() => T;
}

export interface InstizEdge {
  node: Instiz;
  cursor: String;
}

export interface InstizEdgePromise extends Promise<InstizEdge>, Fragmentable {
  node: <T = InstizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InstizEdgeSubscription
  extends Promise<AsyncIterator<InstizEdge>>,
    Fragmentable {
  node: <T = InstizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInstiz {
  count: Int;
}

export interface AggregateInstizPromise
  extends Promise<AggregateInstiz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInstizSubscription
  extends Promise<AsyncIterator<AggregateInstiz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostLinks {
  id: ID_Output;
  link: String;
  from: String;
  hitCount?: Int;
  createdAt: DateTimeOutput;
}

export interface PostLinksPromise extends Promise<PostLinks>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  hitCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostLinksSubscription
  extends Promise<AsyncIterator<PostLinks>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostLinksNullablePromise
  extends Promise<PostLinks | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  hitCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostLinksConnection {
  pageInfo: PageInfo;
  edges: PostLinksEdge[];
}

export interface PostLinksConnectionPromise
  extends Promise<PostLinksConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostLinksEdge>>() => T;
  aggregate: <T = AggregatePostLinksPromise>() => T;
}

export interface PostLinksConnectionSubscription
  extends Promise<AsyncIterator<PostLinksConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostLinksEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostLinksSubscription>() => T;
}

export interface PostLinksEdge {
  node: PostLinks;
  cursor: String;
}

export interface PostLinksEdgePromise
  extends Promise<PostLinksEdge>,
    Fragmentable {
  node: <T = PostLinksPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostLinksEdgeSubscription
  extends Promise<AsyncIterator<PostLinksEdge>>,
    Fragmentable {
  node: <T = PostLinksSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePostLinks {
  count: Int;
}

export interface AggregatePostLinksPromise
  extends Promise<AggregatePostLinks>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostLinksSubscription
  extends Promise<AsyncIterator<AggregatePostLinks>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PpompPu {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface PpompPuPromise extends Promise<PpompPu>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PpompPuSubscription
  extends Promise<AsyncIterator<PpompPu>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PpompPuNullablePromise
  extends Promise<PpompPu | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PpompPuConnection {
  pageInfo: PageInfo;
  edges: PpompPuEdge[];
}

export interface PpompPuConnectionPromise
  extends Promise<PpompPuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PpompPuEdge>>() => T;
  aggregate: <T = AggregatePpompPuPromise>() => T;
}

export interface PpompPuConnectionSubscription
  extends Promise<AsyncIterator<PpompPuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PpompPuEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePpompPuSubscription>() => T;
}

export interface PpompPuEdge {
  node: PpompPu;
  cursor: String;
}

export interface PpompPuEdgePromise extends Promise<PpompPuEdge>, Fragmentable {
  node: <T = PpompPuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PpompPuEdgeSubscription
  extends Promise<AsyncIterator<PpompPuEdge>>,
    Fragmentable {
  node: <T = PpompPuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePpompPu {
  count: Int;
}

export interface AggregatePpompPuPromise
  extends Promise<AggregatePpompPu>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePpompPuSubscription
  extends Promise<AsyncIterator<AggregatePpompPu>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RuliWeb {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface RuliWebPromise extends Promise<RuliWeb>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RuliWebSubscription
  extends Promise<AsyncIterator<RuliWeb>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RuliWebNullablePromise
  extends Promise<RuliWeb | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RuliWebConnection {
  pageInfo: PageInfo;
  edges: RuliWebEdge[];
}

export interface RuliWebConnectionPromise
  extends Promise<RuliWebConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RuliWebEdge>>() => T;
  aggregate: <T = AggregateRuliWebPromise>() => T;
}

export interface RuliWebConnectionSubscription
  extends Promise<AsyncIterator<RuliWebConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RuliWebEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRuliWebSubscription>() => T;
}

export interface RuliWebEdge {
  node: RuliWeb;
  cursor: String;
}

export interface RuliWebEdgePromise extends Promise<RuliWebEdge>, Fragmentable {
  node: <T = RuliWebPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RuliWebEdgeSubscription
  extends Promise<AsyncIterator<RuliWebEdge>>,
    Fragmentable {
  node: <T = RuliWebSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRuliWeb {
  count: Int;
}

export interface AggregateRuliWebPromise
  extends Promise<AggregateRuliWeb>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRuliWebSubscription
  extends Promise<AsyncIterator<AggregateRuliWeb>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SLRClub {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface SLRClubPromise extends Promise<SLRClub>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SLRClubSubscription
  extends Promise<AsyncIterator<SLRClub>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SLRClubNullablePromise
  extends Promise<SLRClub | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SLRClubConnection {
  pageInfo: PageInfo;
  edges: SLRClubEdge[];
}

export interface SLRClubConnectionPromise
  extends Promise<SLRClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SLRClubEdge>>() => T;
  aggregate: <T = AggregateSLRClubPromise>() => T;
}

export interface SLRClubConnectionSubscription
  extends Promise<AsyncIterator<SLRClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SLRClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSLRClubSubscription>() => T;
}

export interface SLRClubEdge {
  node: SLRClub;
  cursor: String;
}

export interface SLRClubEdgePromise extends Promise<SLRClubEdge>, Fragmentable {
  node: <T = SLRClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SLRClubEdgeSubscription
  extends Promise<AsyncIterator<SLRClubEdge>>,
    Fragmentable {
  node: <T = SLRClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSLRClub {
  count: Int;
}

export interface AggregateSLRClubPromise
  extends Promise<AggregateSLRClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSLRClubSubscription
  extends Promise<AsyncIterator<AggregateSLRClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SavedPosts {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface SavedPostsPromise extends Promise<SavedPosts>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SavedPostsSubscription
  extends Promise<AsyncIterator<SavedPosts>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SavedPostsNullablePromise
  extends Promise<SavedPosts | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SavedPostsConnection {
  pageInfo: PageInfo;
  edges: SavedPostsEdge[];
}

export interface SavedPostsConnectionPromise
  extends Promise<SavedPostsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SavedPostsEdge>>() => T;
  aggregate: <T = AggregateSavedPostsPromise>() => T;
}

export interface SavedPostsConnectionSubscription
  extends Promise<AsyncIterator<SavedPostsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SavedPostsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSavedPostsSubscription>() => T;
}

export interface SavedPostsEdge {
  node: SavedPosts;
  cursor: String;
}

export interface SavedPostsEdgePromise
  extends Promise<SavedPostsEdge>,
    Fragmentable {
  node: <T = SavedPostsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SavedPostsEdgeSubscription
  extends Promise<AsyncIterator<SavedPostsEdge>>,
    Fragmentable {
  node: <T = SavedPostsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSavedPosts {
  count: Int;
}

export interface AggregateSavedPostsPromise
  extends Promise<AggregateSavedPosts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSavedPostsSubscription
  extends Promise<AsyncIterator<AggregateSavedPosts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SortedPosts {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface SortedPostsPromise extends Promise<SortedPosts>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SortedPostsSubscription
  extends Promise<AsyncIterator<SortedPosts>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SortedPostsNullablePromise
  extends Promise<SortedPosts | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SortedPostsConnection {
  pageInfo: PageInfo;
  edges: SortedPostsEdge[];
}

export interface SortedPostsConnectionPromise
  extends Promise<SortedPostsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SortedPostsEdge>>() => T;
  aggregate: <T = AggregateSortedPostsPromise>() => T;
}

export interface SortedPostsConnectionSubscription
  extends Promise<AsyncIterator<SortedPostsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SortedPostsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSortedPostsSubscription>() => T;
}

export interface SortedPostsEdge {
  node: SortedPosts;
  cursor: String;
}

export interface SortedPostsEdgePromise
  extends Promise<SortedPostsEdge>,
    Fragmentable {
  node: <T = SortedPostsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SortedPostsEdgeSubscription
  extends Promise<AsyncIterator<SortedPostsEdge>>,
    Fragmentable {
  node: <T = SortedPostsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSortedPosts {
  count: Int;
}

export interface AggregateSortedPostsPromise
  extends Promise<AggregateSortedPosts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSortedPostsSubscription
  extends Promise<AsyncIterator<AggregateSortedPosts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TheQoo {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface TheQooPromise extends Promise<TheQoo>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TheQooSubscription
  extends Promise<AsyncIterator<TheQoo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TheQooNullablePromise
  extends Promise<TheQoo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TheQooConnection {
  pageInfo: PageInfo;
  edges: TheQooEdge[];
}

export interface TheQooConnectionPromise
  extends Promise<TheQooConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TheQooEdge>>() => T;
  aggregate: <T = AggregateTheQooPromise>() => T;
}

export interface TheQooConnectionSubscription
  extends Promise<AsyncIterator<TheQooConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TheQooEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTheQooSubscription>() => T;
}

export interface TheQooEdge {
  node: TheQoo;
  cursor: String;
}

export interface TheQooEdgePromise extends Promise<TheQooEdge>, Fragmentable {
  node: <T = TheQooPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TheQooEdgeSubscription
  extends Promise<AsyncIterator<TheQooEdge>>,
    Fragmentable {
  node: <T = TheQooSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTheQoo {
  count: Int;
}

export interface AggregateTheQooPromise
  extends Promise<AggregateTheQoo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTheQooSubscription
  extends Promise<AsyncIterator<AggregateTheQoo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TodayHumor {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface TodayHumorPromise extends Promise<TodayHumor>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TodayHumorSubscription
  extends Promise<AsyncIterator<TodayHumor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TodayHumorNullablePromise
  extends Promise<TodayHumor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TodayHumorConnection {
  pageInfo: PageInfo;
  edges: TodayHumorEdge[];
}

export interface TodayHumorConnectionPromise
  extends Promise<TodayHumorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TodayHumorEdge>>() => T;
  aggregate: <T = AggregateTodayHumorPromise>() => T;
}

export interface TodayHumorConnectionSubscription
  extends Promise<AsyncIterator<TodayHumorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TodayHumorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTodayHumorSubscription>() => T;
}

export interface TodayHumorEdge {
  node: TodayHumor;
  cursor: String;
}

export interface TodayHumorEdgePromise
  extends Promise<TodayHumorEdge>,
    Fragmentable {
  node: <T = TodayHumorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TodayHumorEdgeSubscription
  extends Promise<AsyncIterator<TodayHumorEdge>>,
    Fragmentable {
  node: <T = TodayHumorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTodayHumor {
  count: Int;
}

export interface AggregateTodayHumorPromise
  extends Promise<AggregateTodayHumor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTodayHumorSubscription
  extends Promise<AsyncIterator<AggregateTodayHumor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface preProcessedPost {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface preProcessedPostPromise
  extends Promise<preProcessedPost>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface preProcessedPostSubscription
  extends Promise<AsyncIterator<preProcessedPost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface preProcessedPostNullablePromise
  extends Promise<preProcessedPost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface preProcessedPostConnection {
  pageInfo: PageInfo;
  edges: preProcessedPostEdge[];
}

export interface preProcessedPostConnectionPromise
  extends Promise<preProcessedPostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<preProcessedPostEdge>>() => T;
  aggregate: <T = AggregatepreProcessedPostPromise>() => T;
}

export interface preProcessedPostConnectionSubscription
  extends Promise<AsyncIterator<preProcessedPostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<preProcessedPostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatepreProcessedPostSubscription>() => T;
}

export interface preProcessedPostEdge {
  node: preProcessedPost;
  cursor: String;
}

export interface preProcessedPostEdgePromise
  extends Promise<preProcessedPostEdge>,
    Fragmentable {
  node: <T = preProcessedPostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface preProcessedPostEdgeSubscription
  extends Promise<AsyncIterator<preProcessedPostEdge>>,
    Fragmentable {
  node: <T = preProcessedPostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatepreProcessedPost {
  count: Int;
}

export interface AggregatepreProcessedPostPromise
  extends Promise<AggregatepreProcessedPost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatepreProcessedPostSubscription
  extends Promise<AsyncIterator<AggregatepreProcessedPost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BobaeSubscriptionPayload {
  mutation: MutationType;
  node: Bobae;
  updatedFields: String[];
  previousValues: BobaePreviousValues;
}

export interface BobaeSubscriptionPayloadPromise
  extends Promise<BobaeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BobaePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BobaePreviousValuesPromise>() => T;
}

export interface BobaeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BobaeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BobaeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BobaePreviousValuesSubscription>() => T;
}

export interface BobaePreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BobaePreviousValuesPromise
  extends Promise<BobaePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BobaePreviousValuesSubscription
  extends Promise<AsyncIterator<BobaePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BullpenSubscriptionPayload {
  mutation: MutationType;
  node: Bullpen;
  updatedFields: String[];
  previousValues: BullpenPreviousValues;
}

export interface BullpenSubscriptionPayloadPromise
  extends Promise<BullpenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BullpenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BullpenPreviousValuesPromise>() => T;
}

export interface BullpenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BullpenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BullpenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BullpenPreviousValuesSubscription>() => T;
}

export interface BullpenPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface BullpenPreviousValuesPromise
  extends Promise<BullpenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BullpenPreviousValuesSubscription
  extends Promise<AsyncIterator<BullpenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClienSubscriptionPayload {
  mutation: MutationType;
  node: Clien;
  updatedFields: String[];
  previousValues: ClienPreviousValues;
}

export interface ClienSubscriptionPayloadPromise
  extends Promise<ClienSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClienPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClienPreviousValuesPromise>() => T;
}

export interface ClienSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClienSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClienSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClienPreviousValuesSubscription>() => T;
}

export interface ClienPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface ClienPreviousValuesPromise
  extends Promise<ClienPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClienPreviousValuesSubscription
  extends Promise<AsyncIterator<ClienPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CookSubscriptionPayload {
  mutation: MutationType;
  node: Cook;
  updatedFields: String[];
  previousValues: CookPreviousValues;
}

export interface CookSubscriptionPayloadPromise
  extends Promise<CookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CookPreviousValuesPromise>() => T;
}

export interface CookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CookPreviousValuesSubscription>() => T;
}

export interface CookPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface CookPreviousValuesPromise
  extends Promise<CookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CookPreviousValuesSubscription
  extends Promise<AsyncIterator<CookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DogDripSubscriptionPayload {
  mutation: MutationType;
  node: DogDrip;
  updatedFields: String[];
  previousValues: DogDripPreviousValues;
}

export interface DogDripSubscriptionPayloadPromise
  extends Promise<DogDripSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DogDripPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DogDripPreviousValuesPromise>() => T;
}

export interface DogDripSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DogDripSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DogDripSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DogDripPreviousValuesSubscription>() => T;
}

export interface DogDripPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface DogDripPreviousValuesPromise
  extends Promise<DogDripPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DogDripPreviousValuesSubscription
  extends Promise<AsyncIterator<DogDripPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ErrorLogSubscriptionPayload {
  mutation: MutationType;
  node: ErrorLog;
  updatedFields: String[];
  previousValues: ErrorLogPreviousValues;
}

export interface ErrorLogSubscriptionPayloadPromise
  extends Promise<ErrorLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ErrorLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ErrorLogPreviousValuesPromise>() => T;
}

export interface ErrorLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ErrorLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ErrorLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ErrorLogPreviousValuesSubscription>() => T;
}

export interface ErrorLogPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  reason: String;
  from: String;
  isRead: Boolean;
  type: String;
  link?: String;
}

export interface ErrorLogPreviousValuesPromise
  extends Promise<ErrorLogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  reason: () => Promise<String>;
  from: () => Promise<String>;
  isRead: () => Promise<Boolean>;
  type: () => Promise<String>;
  link: () => Promise<String>;
}

export interface ErrorLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ErrorLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  reason: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
}

export interface EtolandSubscriptionPayload {
  mutation: MutationType;
  node: Etoland;
  updatedFields: String[];
  previousValues: EtolandPreviousValues;
}

export interface EtolandSubscriptionPayloadPromise
  extends Promise<EtolandSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EtolandPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EtolandPreviousValuesPromise>() => T;
}

export interface EtolandSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EtolandSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EtolandSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EtolandPreviousValuesSubscription>() => T;
}

export interface EtolandPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface EtolandPreviousValuesPromise
  extends Promise<EtolandPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EtolandPreviousValuesSubscription
  extends Promise<AsyncIterator<EtolandPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FmKoreaSubscriptionPayload {
  mutation: MutationType;
  node: FmKorea;
  updatedFields: String[];
  previousValues: FmKoreaPreviousValues;
}

export interface FmKoreaSubscriptionPayloadPromise
  extends Promise<FmKoreaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FmKoreaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FmKoreaPreviousValuesPromise>() => T;
}

export interface FmKoreaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FmKoreaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FmKoreaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FmKoreaPreviousValuesSubscription>() => T;
}

export interface FmKoreaPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface FmKoreaPreviousValuesPromise
  extends Promise<FmKoreaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FmKoreaPreviousValuesSubscription
  extends Promise<AsyncIterator<FmKoreaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GasengiSubscriptionPayload {
  mutation: MutationType;
  node: Gasengi;
  updatedFields: String[];
  previousValues: GasengiPreviousValues;
}

export interface GasengiSubscriptionPayloadPromise
  extends Promise<GasengiSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GasengiPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GasengiPreviousValuesPromise>() => T;
}

export interface GasengiSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GasengiSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GasengiSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GasengiPreviousValuesSubscription>() => T;
}

export interface GasengiPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface GasengiPreviousValuesPromise
  extends Promise<GasengiPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GasengiPreviousValuesSubscription
  extends Promise<AsyncIterator<GasengiPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HumorUnivSubscriptionPayload {
  mutation: MutationType;
  node: HumorUniv;
  updatedFields: String[];
  previousValues: HumorUnivPreviousValues;
}

export interface HumorUnivSubscriptionPayloadPromise
  extends Promise<HumorUnivSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HumorUnivPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HumorUnivPreviousValuesPromise>() => T;
}

export interface HumorUnivSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HumorUnivSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HumorUnivSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HumorUnivPreviousValuesSubscription>() => T;
}

export interface HumorUnivPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  reason: String;
  from: String;
  isRead: Boolean;
  type: String;
}

export interface HumorUnivPreviousValuesPromise
  extends Promise<HumorUnivPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  reason: () => Promise<String>;
  from: () => Promise<String>;
  isRead: () => Promise<Boolean>;
  type: () => Promise<String>;
}

export interface HumorUnivPreviousValuesSubscription
  extends Promise<AsyncIterator<HumorUnivPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  reason: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface IlbeSubscriptionPayload {
  mutation: MutationType;
  node: Ilbe;
  updatedFields: String[];
  previousValues: IlbePreviousValues;
}

export interface IlbeSubscriptionPayloadPromise
  extends Promise<IlbeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IlbePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IlbePreviousValuesPromise>() => T;
}

export interface IlbeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IlbeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IlbeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IlbePreviousValuesSubscription>() => T;
}

export interface IlbePreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface IlbePreviousValuesPromise
  extends Promise<IlbePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IlbePreviousValuesSubscription
  extends Promise<AsyncIterator<IlbePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InstizSubscriptionPayload {
  mutation: MutationType;
  node: Instiz;
  updatedFields: String[];
  previousValues: InstizPreviousValues;
}

export interface InstizSubscriptionPayloadPromise
  extends Promise<InstizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InstizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InstizPreviousValuesPromise>() => T;
}

export interface InstizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InstizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InstizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InstizPreviousValuesSubscription>() => T;
}

export interface InstizPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface InstizPreviousValuesPromise
  extends Promise<InstizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface InstizPreviousValuesSubscription
  extends Promise<AsyncIterator<InstizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostLinksSubscriptionPayload {
  mutation: MutationType;
  node: PostLinks;
  updatedFields: String[];
  previousValues: PostLinksPreviousValues;
}

export interface PostLinksSubscriptionPayloadPromise
  extends Promise<PostLinksSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostLinksPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostLinksPreviousValuesPromise>() => T;
}

export interface PostLinksSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostLinksSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostLinksSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostLinksPreviousValuesSubscription>() => T;
}

export interface PostLinksPreviousValues {
  id: ID_Output;
  link: String;
  from: String;
  hitCount?: Int;
  createdAt: DateTimeOutput;
}

export interface PostLinksPreviousValuesPromise
  extends Promise<PostLinksPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  hitCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostLinksPreviousValuesSubscription
  extends Promise<AsyncIterator<PostLinksPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PpompPuSubscriptionPayload {
  mutation: MutationType;
  node: PpompPu;
  updatedFields: String[];
  previousValues: PpompPuPreviousValues;
}

export interface PpompPuSubscriptionPayloadPromise
  extends Promise<PpompPuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PpompPuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PpompPuPreviousValuesPromise>() => T;
}

export interface PpompPuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PpompPuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PpompPuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PpompPuPreviousValuesSubscription>() => T;
}

export interface PpompPuPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface PpompPuPreviousValuesPromise
  extends Promise<PpompPuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PpompPuPreviousValuesSubscription
  extends Promise<AsyncIterator<PpompPuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RuliWebSubscriptionPayload {
  mutation: MutationType;
  node: RuliWeb;
  updatedFields: String[];
  previousValues: RuliWebPreviousValues;
}

export interface RuliWebSubscriptionPayloadPromise
  extends Promise<RuliWebSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RuliWebPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RuliWebPreviousValuesPromise>() => T;
}

export interface RuliWebSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RuliWebSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RuliWebSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RuliWebPreviousValuesSubscription>() => T;
}

export interface RuliWebPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface RuliWebPreviousValuesPromise
  extends Promise<RuliWebPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RuliWebPreviousValuesSubscription
  extends Promise<AsyncIterator<RuliWebPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SLRClubSubscriptionPayload {
  mutation: MutationType;
  node: SLRClub;
  updatedFields: String[];
  previousValues: SLRClubPreviousValues;
}

export interface SLRClubSubscriptionPayloadPromise
  extends Promise<SLRClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SLRClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SLRClubPreviousValuesPromise>() => T;
}

export interface SLRClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SLRClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SLRClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SLRClubPreviousValuesSubscription>() => T;
}

export interface SLRClubPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface SLRClubPreviousValuesPromise
  extends Promise<SLRClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SLRClubPreviousValuesSubscription
  extends Promise<AsyncIterator<SLRClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SavedPostsSubscriptionPayload {
  mutation: MutationType;
  node: SavedPosts;
  updatedFields: String[];
  previousValues: SavedPostsPreviousValues;
}

export interface SavedPostsSubscriptionPayloadPromise
  extends Promise<SavedPostsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SavedPostsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SavedPostsPreviousValuesPromise>() => T;
}

export interface SavedPostsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SavedPostsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SavedPostsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SavedPostsPreviousValuesSubscription>() => T;
}

export interface SavedPostsPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface SavedPostsPreviousValuesPromise
  extends Promise<SavedPostsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SavedPostsPreviousValuesSubscription
  extends Promise<AsyncIterator<SavedPostsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SortedPostsSubscriptionPayload {
  mutation: MutationType;
  node: SortedPosts;
  updatedFields: String[];
  previousValues: SortedPostsPreviousValues;
}

export interface SortedPostsSubscriptionPayloadPromise
  extends Promise<SortedPostsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SortedPostsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SortedPostsPreviousValuesPromise>() => T;
}

export interface SortedPostsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SortedPostsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SortedPostsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SortedPostsPreviousValuesSubscription>() => T;
}

export interface SortedPostsPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface SortedPostsPreviousValuesPromise
  extends Promise<SortedPostsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SortedPostsPreviousValuesSubscription
  extends Promise<AsyncIterator<SortedPostsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TheQooSubscriptionPayload {
  mutation: MutationType;
  node: TheQoo;
  updatedFields: String[];
  previousValues: TheQooPreviousValues;
}

export interface TheQooSubscriptionPayloadPromise
  extends Promise<TheQooSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TheQooPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TheQooPreviousValuesPromise>() => T;
}

export interface TheQooSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TheQooSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TheQooSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TheQooPreviousValuesSubscription>() => T;
}

export interface TheQooPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface TheQooPreviousValuesPromise
  extends Promise<TheQooPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TheQooPreviousValuesSubscription
  extends Promise<AsyncIterator<TheQooPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TodayHumorSubscriptionPayload {
  mutation: MutationType;
  node: TodayHumor;
  updatedFields: String[];
  previousValues: TodayHumorPreviousValues;
}

export interface TodayHumorSubscriptionPayloadPromise
  extends Promise<TodayHumorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TodayHumorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TodayHumorPreviousValuesPromise>() => T;
}

export interface TodayHumorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TodayHumorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TodayHumorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TodayHumorPreviousValuesSubscription>() => T;
}

export interface TodayHumorPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount?: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface TodayHumorPreviousValuesPromise
  extends Promise<TodayHumorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TodayHumorPreviousValuesSubscription
  extends Promise<AsyncIterator<TodayHumorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface preProcessedPostSubscriptionPayload {
  mutation: MutationType;
  node: preProcessedPost;
  updatedFields: String[];
  previousValues: preProcessedPostPreviousValues;
}

export interface preProcessedPostSubscriptionPayloadPromise
  extends Promise<preProcessedPostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = preProcessedPostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = preProcessedPostPreviousValuesPromise>() => T;
}

export interface preProcessedPostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<preProcessedPostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = preProcessedPostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = preProcessedPostPreviousValuesSubscription>() => T;
}

export interface preProcessedPostPreviousValues {
  id: ID_Output;
  title: String;
  author?: String;
  registeredAt?: String;
  hitCount: Int;
  link: String;
  from: String;
  createdAt: DateTimeOutput;
}

export interface preProcessedPostPreviousValuesPromise
  extends Promise<preProcessedPostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  author: () => Promise<String>;
  registeredAt: () => Promise<String>;
  hitCount: () => Promise<Int>;
  link: () => Promise<String>;
  from: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface preProcessedPostPreviousValuesSubscription
  extends Promise<AsyncIterator<preProcessedPostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<String>>;
  hitCount: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  from: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "PostLinks",
    embedded: false
  },
  {
    name: "preProcessedPost",
    embedded: false
  },
  {
    name: "SortedPosts",
    embedded: false
  },
  {
    name: "SavedPosts",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Bobae",
    embedded: false
  },
  {
    name: "RuliWeb",
    embedded: false
  },
  {
    name: "Clien",
    embedded: false
  },
  {
    name: "Ilbe",
    embedded: false
  },
  {
    name: "Bullpen",
    embedded: false
  },
  {
    name: "Etoland",
    embedded: false
  },
  {
    name: "SLRClub",
    embedded: false
  },
  {
    name: "TodayHumor",
    embedded: false
  },
  {
    name: "Cook",
    embedded: false
  },
  {
    name: "Gasengi",
    embedded: false
  },
  {
    name: "PpompPu",
    embedded: false
  },
  {
    name: "Instiz",
    embedded: false
  },
  {
    name: "TheQoo",
    embedded: false
  },
  {
    name: "FmKorea",
    embedded: false
  },
  {
    name: "DogDrip",
    embedded: false
  },
  {
    name: "ErrorLog",
    embedded: false
  },
  {
    name: "HumorUniv",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
