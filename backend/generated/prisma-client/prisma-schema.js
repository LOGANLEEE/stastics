module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBobae {
  count: Int!
}

type AggregateBullpen {
  count: Int!
}

type AggregateClien {
  count: Int!
}

type AggregateCook {
  count: Int!
}

type AggregateDogDrip {
  count: Int!
}

type AggregateErrorLog {
  count: Int!
}

type AggregateEtoland {
  count: Int!
}

type AggregateFmKorea {
  count: Int!
}

type AggregateGasengi {
  count: Int!
}

type AggregateHumorUniv {
  count: Int!
}

type AggregateIlbe {
  count: Int!
}

type AggregateInstiz {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregatePostLinks {
  count: Int!
}

type AggregatePpompPu {
  count: Int!
}

type AggregateRuliWeb {
  count: Int!
}

type AggregateSavedPosts {
  count: Int!
}

type AggregateSLRClub {
  count: Int!
}

type AggregateSortedPosts {
  count: Int!
}

type AggregateTempPost {
  count: Int!
}

type AggregateTheQoo {
  count: Int!
}

type AggregateTodayHumor {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bobae {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type BobaeConnection {
  pageInfo: PageInfo!
  edges: [BobaeEdge]!
  aggregate: AggregateBobae!
}

input BobaeCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type BobaeEdge {
  node: Bobae!
  cursor: String!
}

enum BobaeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type BobaePreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type BobaeSubscriptionPayload {
  mutation: MutationType!
  node: Bobae
  updatedFields: [String!]
  previousValues: BobaePreviousValues
}

input BobaeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BobaeWhereInput
  AND: [BobaeSubscriptionWhereInput!]
  OR: [BobaeSubscriptionWhereInput!]
  NOT: [BobaeSubscriptionWhereInput!]
}

input BobaeUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input BobaeUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input BobaeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [BobaeWhereInput!]
  OR: [BobaeWhereInput!]
  NOT: [BobaeWhereInput!]
}

input BobaeWhereUniqueInput {
  id: ID
}

type Bullpen {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type BullpenConnection {
  pageInfo: PageInfo!
  edges: [BullpenEdge]!
  aggregate: AggregateBullpen!
}

input BullpenCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type BullpenEdge {
  node: Bullpen!
  cursor: String!
}

enum BullpenOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type BullpenPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type BullpenSubscriptionPayload {
  mutation: MutationType!
  node: Bullpen
  updatedFields: [String!]
  previousValues: BullpenPreviousValues
}

input BullpenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BullpenWhereInput
  AND: [BullpenSubscriptionWhereInput!]
  OR: [BullpenSubscriptionWhereInput!]
  NOT: [BullpenSubscriptionWhereInput!]
}

input BullpenUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input BullpenUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input BullpenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [BullpenWhereInput!]
  OR: [BullpenWhereInput!]
  NOT: [BullpenWhereInput!]
}

input BullpenWhereUniqueInput {
  id: ID
}

type Clien {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type ClienConnection {
  pageInfo: PageInfo!
  edges: [ClienEdge]!
  aggregate: AggregateClien!
}

input ClienCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type ClienEdge {
  node: Clien!
  cursor: String!
}

enum ClienOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClienPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type ClienSubscriptionPayload {
  mutation: MutationType!
  node: Clien
  updatedFields: [String!]
  previousValues: ClienPreviousValues
}

input ClienSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClienWhereInput
  AND: [ClienSubscriptionWhereInput!]
  OR: [ClienSubscriptionWhereInput!]
  NOT: [ClienSubscriptionWhereInput!]
}

input ClienUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input ClienUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input ClienWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ClienWhereInput!]
  OR: [ClienWhereInput!]
  NOT: [ClienWhereInput!]
}

input ClienWhereUniqueInput {
  id: ID
}

type Cook {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type CookConnection {
  pageInfo: PageInfo!
  edges: [CookEdge]!
  aggregate: AggregateCook!
}

input CookCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type CookEdge {
  node: Cook!
  cursor: String!
}

enum CookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type CookPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type CookSubscriptionPayload {
  mutation: MutationType!
  node: Cook
  updatedFields: [String!]
  previousValues: CookPreviousValues
}

input CookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CookWhereInput
  AND: [CookSubscriptionWhereInput!]
  OR: [CookSubscriptionWhereInput!]
  NOT: [CookSubscriptionWhereInput!]
}

input CookUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input CookUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input CookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CookWhereInput!]
  OR: [CookWhereInput!]
  NOT: [CookWhereInput!]
}

input CookWhereUniqueInput {
  id: ID
}

scalar DateTime

type DogDrip {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type DogDripConnection {
  pageInfo: PageInfo!
  edges: [DogDripEdge]!
  aggregate: AggregateDogDrip!
}

input DogDripCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type DogDripEdge {
  node: DogDrip!
  cursor: String!
}

enum DogDripOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type DogDripPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type DogDripSubscriptionPayload {
  mutation: MutationType!
  node: DogDrip
  updatedFields: [String!]
  previousValues: DogDripPreviousValues
}

input DogDripSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DogDripWhereInput
  AND: [DogDripSubscriptionWhereInput!]
  OR: [DogDripSubscriptionWhereInput!]
  NOT: [DogDripSubscriptionWhereInput!]
}

input DogDripUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input DogDripUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input DogDripWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [DogDripWhereInput!]
  OR: [DogDripWhereInput!]
  NOT: [DogDripWhereInput!]
}

input DogDripWhereUniqueInput {
  id: ID
}

type ErrorLog {
  id: ID!
  createdAt: DateTime!
  reason: String!
  from: String!
  isRead: Boolean!
  type: String!
  link: String
}

type ErrorLogConnection {
  pageInfo: PageInfo!
  edges: [ErrorLogEdge]!
  aggregate: AggregateErrorLog!
}

input ErrorLogCreateInput {
  id: ID
  reason: String!
  from: String!
  isRead: Boolean!
  type: String!
  link: String
}

type ErrorLogEdge {
  node: ErrorLog!
  cursor: String!
}

enum ErrorLogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  reason_ASC
  reason_DESC
  from_ASC
  from_DESC
  isRead_ASC
  isRead_DESC
  type_ASC
  type_DESC
  link_ASC
  link_DESC
}

type ErrorLogPreviousValues {
  id: ID!
  createdAt: DateTime!
  reason: String!
  from: String!
  isRead: Boolean!
  type: String!
  link: String
}

type ErrorLogSubscriptionPayload {
  mutation: MutationType!
  node: ErrorLog
  updatedFields: [String!]
  previousValues: ErrorLogPreviousValues
}

input ErrorLogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ErrorLogWhereInput
  AND: [ErrorLogSubscriptionWhereInput!]
  OR: [ErrorLogSubscriptionWhereInput!]
  NOT: [ErrorLogSubscriptionWhereInput!]
}

input ErrorLogUpdateInput {
  reason: String
  from: String
  isRead: Boolean
  type: String
  link: String
}

input ErrorLogUpdateManyMutationInput {
  reason: String
  from: String
  isRead: Boolean
  type: String
  link: String
}

input ErrorLogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  isRead: Boolean
  isRead_not: Boolean
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  AND: [ErrorLogWhereInput!]
  OR: [ErrorLogWhereInput!]
  NOT: [ErrorLogWhereInput!]
}

input ErrorLogWhereUniqueInput {
  id: ID
}

type Etoland {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type EtolandConnection {
  pageInfo: PageInfo!
  edges: [EtolandEdge]!
  aggregate: AggregateEtoland!
}

input EtolandCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type EtolandEdge {
  node: Etoland!
  cursor: String!
}

enum EtolandOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type EtolandPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type EtolandSubscriptionPayload {
  mutation: MutationType!
  node: Etoland
  updatedFields: [String!]
  previousValues: EtolandPreviousValues
}

input EtolandSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EtolandWhereInput
  AND: [EtolandSubscriptionWhereInput!]
  OR: [EtolandSubscriptionWhereInput!]
  NOT: [EtolandSubscriptionWhereInput!]
}

input EtolandUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input EtolandUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input EtolandWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EtolandWhereInput!]
  OR: [EtolandWhereInput!]
  NOT: [EtolandWhereInput!]
}

input EtolandWhereUniqueInput {
  id: ID
}

type FmKorea {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type FmKoreaConnection {
  pageInfo: PageInfo!
  edges: [FmKoreaEdge]!
  aggregate: AggregateFmKorea!
}

input FmKoreaCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type FmKoreaEdge {
  node: FmKorea!
  cursor: String!
}

enum FmKoreaOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type FmKoreaPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type FmKoreaSubscriptionPayload {
  mutation: MutationType!
  node: FmKorea
  updatedFields: [String!]
  previousValues: FmKoreaPreviousValues
}

input FmKoreaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FmKoreaWhereInput
  AND: [FmKoreaSubscriptionWhereInput!]
  OR: [FmKoreaSubscriptionWhereInput!]
  NOT: [FmKoreaSubscriptionWhereInput!]
}

input FmKoreaUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input FmKoreaUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input FmKoreaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FmKoreaWhereInput!]
  OR: [FmKoreaWhereInput!]
  NOT: [FmKoreaWhereInput!]
}

input FmKoreaWhereUniqueInput {
  id: ID
}

type Gasengi {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type GasengiConnection {
  pageInfo: PageInfo!
  edges: [GasengiEdge]!
  aggregate: AggregateGasengi!
}

input GasengiCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type GasengiEdge {
  node: Gasengi!
  cursor: String!
}

enum GasengiOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type GasengiPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type GasengiSubscriptionPayload {
  mutation: MutationType!
  node: Gasengi
  updatedFields: [String!]
  previousValues: GasengiPreviousValues
}

input GasengiSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GasengiWhereInput
  AND: [GasengiSubscriptionWhereInput!]
  OR: [GasengiSubscriptionWhereInput!]
  NOT: [GasengiSubscriptionWhereInput!]
}

input GasengiUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input GasengiUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input GasengiWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GasengiWhereInput!]
  OR: [GasengiWhereInput!]
  NOT: [GasengiWhereInput!]
}

input GasengiWhereUniqueInput {
  id: ID
}

type HumorUniv {
  id: ID!
  createdAt: DateTime!
  reason: String!
  from: String!
  isRead: Boolean!
  type: String!
}

type HumorUnivConnection {
  pageInfo: PageInfo!
  edges: [HumorUnivEdge]!
  aggregate: AggregateHumorUniv!
}

input HumorUnivCreateInput {
  id: ID
  reason: String!
  from: String!
  isRead: Boolean!
  type: String!
}

type HumorUnivEdge {
  node: HumorUniv!
  cursor: String!
}

enum HumorUnivOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  reason_ASC
  reason_DESC
  from_ASC
  from_DESC
  isRead_ASC
  isRead_DESC
  type_ASC
  type_DESC
}

type HumorUnivPreviousValues {
  id: ID!
  createdAt: DateTime!
  reason: String!
  from: String!
  isRead: Boolean!
  type: String!
}

type HumorUnivSubscriptionPayload {
  mutation: MutationType!
  node: HumorUniv
  updatedFields: [String!]
  previousValues: HumorUnivPreviousValues
}

input HumorUnivSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HumorUnivWhereInput
  AND: [HumorUnivSubscriptionWhereInput!]
  OR: [HumorUnivSubscriptionWhereInput!]
  NOT: [HumorUnivSubscriptionWhereInput!]
}

input HumorUnivUpdateInput {
  reason: String
  from: String
  isRead: Boolean
  type: String
}

input HumorUnivUpdateManyMutationInput {
  reason: String
  from: String
  isRead: Boolean
  type: String
}

input HumorUnivWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  isRead: Boolean
  isRead_not: Boolean
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [HumorUnivWhereInput!]
  OR: [HumorUnivWhereInput!]
  NOT: [HumorUnivWhereInput!]
}

input HumorUnivWhereUniqueInput {
  id: ID
}

type Ilbe {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type IlbeConnection {
  pageInfo: PageInfo!
  edges: [IlbeEdge]!
  aggregate: AggregateIlbe!
}

input IlbeCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type IlbeEdge {
  node: Ilbe!
  cursor: String!
}

enum IlbeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type IlbePreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type IlbeSubscriptionPayload {
  mutation: MutationType!
  node: Ilbe
  updatedFields: [String!]
  previousValues: IlbePreviousValues
}

input IlbeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IlbeWhereInput
  AND: [IlbeSubscriptionWhereInput!]
  OR: [IlbeSubscriptionWhereInput!]
  NOT: [IlbeSubscriptionWhereInput!]
}

input IlbeUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input IlbeUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input IlbeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [IlbeWhereInput!]
  OR: [IlbeWhereInput!]
  NOT: [IlbeWhereInput!]
}

input IlbeWhereUniqueInput {
  id: ID
}

type Instiz {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type InstizConnection {
  pageInfo: PageInfo!
  edges: [InstizEdge]!
  aggregate: AggregateInstiz!
}

input InstizCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type InstizEdge {
  node: Instiz!
  cursor: String!
}

enum InstizOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type InstizPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type InstizSubscriptionPayload {
  mutation: MutationType!
  node: Instiz
  updatedFields: [String!]
  previousValues: InstizPreviousValues
}

input InstizSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InstizWhereInput
  AND: [InstizSubscriptionWhereInput!]
  OR: [InstizSubscriptionWhereInput!]
  NOT: [InstizSubscriptionWhereInput!]
}

input InstizUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input InstizUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input InstizWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [InstizWhereInput!]
  OR: [InstizWhereInput!]
  NOT: [InstizWhereInput!]
}

input InstizWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBobae(data: BobaeCreateInput!): Bobae!
  updateBobae(data: BobaeUpdateInput!, where: BobaeWhereUniqueInput!): Bobae
  updateManyBobaes(data: BobaeUpdateManyMutationInput!, where: BobaeWhereInput): BatchPayload!
  upsertBobae(where: BobaeWhereUniqueInput!, create: BobaeCreateInput!, update: BobaeUpdateInput!): Bobae!
  deleteBobae(where: BobaeWhereUniqueInput!): Bobae
  deleteManyBobaes(where: BobaeWhereInput): BatchPayload!
  createBullpen(data: BullpenCreateInput!): Bullpen!
  updateBullpen(data: BullpenUpdateInput!, where: BullpenWhereUniqueInput!): Bullpen
  updateManyBullpens(data: BullpenUpdateManyMutationInput!, where: BullpenWhereInput): BatchPayload!
  upsertBullpen(where: BullpenWhereUniqueInput!, create: BullpenCreateInput!, update: BullpenUpdateInput!): Bullpen!
  deleteBullpen(where: BullpenWhereUniqueInput!): Bullpen
  deleteManyBullpens(where: BullpenWhereInput): BatchPayload!
  createClien(data: ClienCreateInput!): Clien!
  updateClien(data: ClienUpdateInput!, where: ClienWhereUniqueInput!): Clien
  updateManyCliens(data: ClienUpdateManyMutationInput!, where: ClienWhereInput): BatchPayload!
  upsertClien(where: ClienWhereUniqueInput!, create: ClienCreateInput!, update: ClienUpdateInput!): Clien!
  deleteClien(where: ClienWhereUniqueInput!): Clien
  deleteManyCliens(where: ClienWhereInput): BatchPayload!
  createCook(data: CookCreateInput!): Cook!
  updateCook(data: CookUpdateInput!, where: CookWhereUniqueInput!): Cook
  updateManyCooks(data: CookUpdateManyMutationInput!, where: CookWhereInput): BatchPayload!
  upsertCook(where: CookWhereUniqueInput!, create: CookCreateInput!, update: CookUpdateInput!): Cook!
  deleteCook(where: CookWhereUniqueInput!): Cook
  deleteManyCooks(where: CookWhereInput): BatchPayload!
  createDogDrip(data: DogDripCreateInput!): DogDrip!
  updateDogDrip(data: DogDripUpdateInput!, where: DogDripWhereUniqueInput!): DogDrip
  updateManyDogDrips(data: DogDripUpdateManyMutationInput!, where: DogDripWhereInput): BatchPayload!
  upsertDogDrip(where: DogDripWhereUniqueInput!, create: DogDripCreateInput!, update: DogDripUpdateInput!): DogDrip!
  deleteDogDrip(where: DogDripWhereUniqueInput!): DogDrip
  deleteManyDogDrips(where: DogDripWhereInput): BatchPayload!
  createErrorLog(data: ErrorLogCreateInput!): ErrorLog!
  updateErrorLog(data: ErrorLogUpdateInput!, where: ErrorLogWhereUniqueInput!): ErrorLog
  updateManyErrorLogs(data: ErrorLogUpdateManyMutationInput!, where: ErrorLogWhereInput): BatchPayload!
  upsertErrorLog(where: ErrorLogWhereUniqueInput!, create: ErrorLogCreateInput!, update: ErrorLogUpdateInput!): ErrorLog!
  deleteErrorLog(where: ErrorLogWhereUniqueInput!): ErrorLog
  deleteManyErrorLogs(where: ErrorLogWhereInput): BatchPayload!
  createEtoland(data: EtolandCreateInput!): Etoland!
  updateEtoland(data: EtolandUpdateInput!, where: EtolandWhereUniqueInput!): Etoland
  updateManyEtolands(data: EtolandUpdateManyMutationInput!, where: EtolandWhereInput): BatchPayload!
  upsertEtoland(where: EtolandWhereUniqueInput!, create: EtolandCreateInput!, update: EtolandUpdateInput!): Etoland!
  deleteEtoland(where: EtolandWhereUniqueInput!): Etoland
  deleteManyEtolands(where: EtolandWhereInput): BatchPayload!
  createFmKorea(data: FmKoreaCreateInput!): FmKorea!
  updateFmKorea(data: FmKoreaUpdateInput!, where: FmKoreaWhereUniqueInput!): FmKorea
  updateManyFmKoreas(data: FmKoreaUpdateManyMutationInput!, where: FmKoreaWhereInput): BatchPayload!
  upsertFmKorea(where: FmKoreaWhereUniqueInput!, create: FmKoreaCreateInput!, update: FmKoreaUpdateInput!): FmKorea!
  deleteFmKorea(where: FmKoreaWhereUniqueInput!): FmKorea
  deleteManyFmKoreas(where: FmKoreaWhereInput): BatchPayload!
  createGasengi(data: GasengiCreateInput!): Gasengi!
  updateGasengi(data: GasengiUpdateInput!, where: GasengiWhereUniqueInput!): Gasengi
  updateManyGasengis(data: GasengiUpdateManyMutationInput!, where: GasengiWhereInput): BatchPayload!
  upsertGasengi(where: GasengiWhereUniqueInput!, create: GasengiCreateInput!, update: GasengiUpdateInput!): Gasengi!
  deleteGasengi(where: GasengiWhereUniqueInput!): Gasengi
  deleteManyGasengis(where: GasengiWhereInput): BatchPayload!
  createHumorUniv(data: HumorUnivCreateInput!): HumorUniv!
  updateHumorUniv(data: HumorUnivUpdateInput!, where: HumorUnivWhereUniqueInput!): HumorUniv
  updateManyHumorUnivs(data: HumorUnivUpdateManyMutationInput!, where: HumorUnivWhereInput): BatchPayload!
  upsertHumorUniv(where: HumorUnivWhereUniqueInput!, create: HumorUnivCreateInput!, update: HumorUnivUpdateInput!): HumorUniv!
  deleteHumorUniv(where: HumorUnivWhereUniqueInput!): HumorUniv
  deleteManyHumorUnivs(where: HumorUnivWhereInput): BatchPayload!
  createIlbe(data: IlbeCreateInput!): Ilbe!
  updateIlbe(data: IlbeUpdateInput!, where: IlbeWhereUniqueInput!): Ilbe
  updateManyIlbes(data: IlbeUpdateManyMutationInput!, where: IlbeWhereInput): BatchPayload!
  upsertIlbe(where: IlbeWhereUniqueInput!, create: IlbeCreateInput!, update: IlbeUpdateInput!): Ilbe!
  deleteIlbe(where: IlbeWhereUniqueInput!): Ilbe
  deleteManyIlbes(where: IlbeWhereInput): BatchPayload!
  createInstiz(data: InstizCreateInput!): Instiz!
  updateInstiz(data: InstizUpdateInput!, where: InstizWhereUniqueInput!): Instiz
  updateManyInstizes(data: InstizUpdateManyMutationInput!, where: InstizWhereInput): BatchPayload!
  upsertInstiz(where: InstizWhereUniqueInput!, create: InstizCreateInput!, update: InstizUpdateInput!): Instiz!
  deleteInstiz(where: InstizWhereUniqueInput!): Instiz
  deleteManyInstizes(where: InstizWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createPostLinks(data: PostLinksCreateInput!): PostLinks!
  updatePostLinks(data: PostLinksUpdateInput!, where: PostLinksWhereUniqueInput!): PostLinks
  updateManyPostLinkses(data: PostLinksUpdateManyMutationInput!, where: PostLinksWhereInput): BatchPayload!
  upsertPostLinks(where: PostLinksWhereUniqueInput!, create: PostLinksCreateInput!, update: PostLinksUpdateInput!): PostLinks!
  deletePostLinks(where: PostLinksWhereUniqueInput!): PostLinks
  deleteManyPostLinkses(where: PostLinksWhereInput): BatchPayload!
  createPpompPu(data: PpompPuCreateInput!): PpompPu!
  updatePpompPu(data: PpompPuUpdateInput!, where: PpompPuWhereUniqueInput!): PpompPu
  updateManyPpompPus(data: PpompPuUpdateManyMutationInput!, where: PpompPuWhereInput): BatchPayload!
  upsertPpompPu(where: PpompPuWhereUniqueInput!, create: PpompPuCreateInput!, update: PpompPuUpdateInput!): PpompPu!
  deletePpompPu(where: PpompPuWhereUniqueInput!): PpompPu
  deleteManyPpompPus(where: PpompPuWhereInput): BatchPayload!
  createRuliWeb(data: RuliWebCreateInput!): RuliWeb!
  updateRuliWeb(data: RuliWebUpdateInput!, where: RuliWebWhereUniqueInput!): RuliWeb
  updateManyRuliWebs(data: RuliWebUpdateManyMutationInput!, where: RuliWebWhereInput): BatchPayload!
  upsertRuliWeb(where: RuliWebWhereUniqueInput!, create: RuliWebCreateInput!, update: RuliWebUpdateInput!): RuliWeb!
  deleteRuliWeb(where: RuliWebWhereUniqueInput!): RuliWeb
  deleteManyRuliWebs(where: RuliWebWhereInput): BatchPayload!
  createSLRClub(data: SLRClubCreateInput!): SLRClub!
  updateSLRClub(data: SLRClubUpdateInput!, where: SLRClubWhereUniqueInput!): SLRClub
  updateManySLRClubs(data: SLRClubUpdateManyMutationInput!, where: SLRClubWhereInput): BatchPayload!
  upsertSLRClub(where: SLRClubWhereUniqueInput!, create: SLRClubCreateInput!, update: SLRClubUpdateInput!): SLRClub!
  deleteSLRClub(where: SLRClubWhereUniqueInput!): SLRClub
  deleteManySLRClubs(where: SLRClubWhereInput): BatchPayload!
  createSavedPosts(data: SavedPostsCreateInput!): SavedPosts!
  updateSavedPosts(data: SavedPostsUpdateInput!, where: SavedPostsWhereUniqueInput!): SavedPosts
  updateManySavedPostses(data: SavedPostsUpdateManyMutationInput!, where: SavedPostsWhereInput): BatchPayload!
  upsertSavedPosts(where: SavedPostsWhereUniqueInput!, create: SavedPostsCreateInput!, update: SavedPostsUpdateInput!): SavedPosts!
  deleteSavedPosts(where: SavedPostsWhereUniqueInput!): SavedPosts
  deleteManySavedPostses(where: SavedPostsWhereInput): BatchPayload!
  createSortedPosts(data: SortedPostsCreateInput!): SortedPosts!
  updateSortedPosts(data: SortedPostsUpdateInput!, where: SortedPostsWhereUniqueInput!): SortedPosts
  updateManySortedPostses(data: SortedPostsUpdateManyMutationInput!, where: SortedPostsWhereInput): BatchPayload!
  upsertSortedPosts(where: SortedPostsWhereUniqueInput!, create: SortedPostsCreateInput!, update: SortedPostsUpdateInput!): SortedPosts!
  deleteSortedPosts(where: SortedPostsWhereUniqueInput!): SortedPosts
  deleteManySortedPostses(where: SortedPostsWhereInput): BatchPayload!
  createTempPost(data: TempPostCreateInput!): TempPost!
  updateTempPost(data: TempPostUpdateInput!, where: TempPostWhereUniqueInput!): TempPost
  updateManyTempPosts(data: TempPostUpdateManyMutationInput!, where: TempPostWhereInput): BatchPayload!
  upsertTempPost(where: TempPostWhereUniqueInput!, create: TempPostCreateInput!, update: TempPostUpdateInput!): TempPost!
  deleteTempPost(where: TempPostWhereUniqueInput!): TempPost
  deleteManyTempPosts(where: TempPostWhereInput): BatchPayload!
  createTheQoo(data: TheQooCreateInput!): TheQoo!
  updateTheQoo(data: TheQooUpdateInput!, where: TheQooWhereUniqueInput!): TheQoo
  updateManyTheQoos(data: TheQooUpdateManyMutationInput!, where: TheQooWhereInput): BatchPayload!
  upsertTheQoo(where: TheQooWhereUniqueInput!, create: TheQooCreateInput!, update: TheQooUpdateInput!): TheQoo!
  deleteTheQoo(where: TheQooWhereUniqueInput!): TheQoo
  deleteManyTheQoos(where: TheQooWhereInput): BatchPayload!
  createTodayHumor(data: TodayHumorCreateInput!): TodayHumor!
  updateTodayHumor(data: TodayHumorUpdateInput!, where: TodayHumorWhereUniqueInput!): TodayHumor
  updateManyTodayHumors(data: TodayHumorUpdateManyMutationInput!, where: TodayHumorWhereInput): BatchPayload!
  upsertTodayHumor(where: TodayHumorWhereUniqueInput!, create: TodayHumorCreateInput!, update: TodayHumorUpdateInput!): TodayHumor!
  deleteTodayHumor(where: TodayHumorWhereUniqueInput!): TodayHumor
  deleteManyTodayHumors(where: TodayHumorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

type PostLinks {
  id: ID!
  link: String!
  from: String!
  createdAt: DateTime!
}

type PostLinksConnection {
  pageInfo: PageInfo!
  edges: [PostLinksEdge]!
  aggregate: AggregatePostLinks!
}

input PostLinksCreateInput {
  id: ID
  link: String!
  from: String!
}

type PostLinksEdge {
  node: PostLinks!
  cursor: String!
}

enum PostLinksOrderByInput {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostLinksPreviousValues {
  id: ID!
  link: String!
  from: String!
  createdAt: DateTime!
}

type PostLinksSubscriptionPayload {
  mutation: MutationType!
  node: PostLinks
  updatedFields: [String!]
  previousValues: PostLinksPreviousValues
}

input PostLinksSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostLinksWhereInput
  AND: [PostLinksSubscriptionWhereInput!]
  OR: [PostLinksSubscriptionWhereInput!]
  NOT: [PostLinksSubscriptionWhereInput!]
}

input PostLinksUpdateInput {
  link: String
  from: String
}

input PostLinksUpdateManyMutationInput {
  link: String
  from: String
}

input PostLinksWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostLinksWhereInput!]
  OR: [PostLinksWhereInput!]
  NOT: [PostLinksWhereInput!]
}

input PostLinksWhereUniqueInput {
  id: ID
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input PostUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type PpompPu {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type PpompPuConnection {
  pageInfo: PageInfo!
  edges: [PpompPuEdge]!
  aggregate: AggregatePpompPu!
}

input PpompPuCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type PpompPuEdge {
  node: PpompPu!
  cursor: String!
}

enum PpompPuOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type PpompPuPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type PpompPuSubscriptionPayload {
  mutation: MutationType!
  node: PpompPu
  updatedFields: [String!]
  previousValues: PpompPuPreviousValues
}

input PpompPuSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PpompPuWhereInput
  AND: [PpompPuSubscriptionWhereInput!]
  OR: [PpompPuSubscriptionWhereInput!]
  NOT: [PpompPuSubscriptionWhereInput!]
}

input PpompPuUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input PpompPuUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input PpompPuWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PpompPuWhereInput!]
  OR: [PpompPuWhereInput!]
  NOT: [PpompPuWhereInput!]
}

input PpompPuWhereUniqueInput {
  id: ID
}

type Query {
  bobae(where: BobaeWhereUniqueInput!): Bobae
  bobaes(where: BobaeWhereInput, orderBy: BobaeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bobae]!
  bobaesConnection(where: BobaeWhereInput, orderBy: BobaeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BobaeConnection!
  bullpen(where: BullpenWhereUniqueInput!): Bullpen
  bullpens(where: BullpenWhereInput, orderBy: BullpenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bullpen]!
  bullpensConnection(where: BullpenWhereInput, orderBy: BullpenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BullpenConnection!
  clien(where: ClienWhereUniqueInput!): Clien
  cliens(where: ClienWhereInput, orderBy: ClienOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clien]!
  cliensConnection(where: ClienWhereInput, orderBy: ClienOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClienConnection!
  cook(where: CookWhereUniqueInput!): Cook
  cooks(where: CookWhereInput, orderBy: CookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cook]!
  cooksConnection(where: CookWhereInput, orderBy: CookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CookConnection!
  dogDrip(where: DogDripWhereUniqueInput!): DogDrip
  dogDrips(where: DogDripWhereInput, orderBy: DogDripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DogDrip]!
  dogDripsConnection(where: DogDripWhereInput, orderBy: DogDripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DogDripConnection!
  errorLog(where: ErrorLogWhereUniqueInput!): ErrorLog
  errorLogs(where: ErrorLogWhereInput, orderBy: ErrorLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ErrorLog]!
  errorLogsConnection(where: ErrorLogWhereInput, orderBy: ErrorLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ErrorLogConnection!
  etoland(where: EtolandWhereUniqueInput!): Etoland
  etolands(where: EtolandWhereInput, orderBy: EtolandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Etoland]!
  etolandsConnection(where: EtolandWhereInput, orderBy: EtolandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EtolandConnection!
  fmKorea(where: FmKoreaWhereUniqueInput!): FmKorea
  fmKoreas(where: FmKoreaWhereInput, orderBy: FmKoreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FmKorea]!
  fmKoreasConnection(where: FmKoreaWhereInput, orderBy: FmKoreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FmKoreaConnection!
  gasengi(where: GasengiWhereUniqueInput!): Gasengi
  gasengis(where: GasengiWhereInput, orderBy: GasengiOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gasengi]!
  gasengisConnection(where: GasengiWhereInput, orderBy: GasengiOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GasengiConnection!
  humorUniv(where: HumorUnivWhereUniqueInput!): HumorUniv
  humorUnivs(where: HumorUnivWhereInput, orderBy: HumorUnivOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HumorUniv]!
  humorUnivsConnection(where: HumorUnivWhereInput, orderBy: HumorUnivOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HumorUnivConnection!
  ilbe(where: IlbeWhereUniqueInput!): Ilbe
  ilbes(where: IlbeWhereInput, orderBy: IlbeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ilbe]!
  ilbesConnection(where: IlbeWhereInput, orderBy: IlbeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IlbeConnection!
  instiz(where: InstizWhereUniqueInput!): Instiz
  instizes(where: InstizWhereInput, orderBy: InstizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instiz]!
  instizesConnection(where: InstizWhereInput, orderBy: InstizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstizConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  postLinks(where: PostLinksWhereUniqueInput!): PostLinks
  postLinkses(where: PostLinksWhereInput, orderBy: PostLinksOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PostLinks]!
  postLinksesConnection(where: PostLinksWhereInput, orderBy: PostLinksOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostLinksConnection!
  ppompPu(where: PpompPuWhereUniqueInput!): PpompPu
  ppompPus(where: PpompPuWhereInput, orderBy: PpompPuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PpompPu]!
  ppompPusConnection(where: PpompPuWhereInput, orderBy: PpompPuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PpompPuConnection!
  ruliWeb(where: RuliWebWhereUniqueInput!): RuliWeb
  ruliWebs(where: RuliWebWhereInput, orderBy: RuliWebOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RuliWeb]!
  ruliWebsConnection(where: RuliWebWhereInput, orderBy: RuliWebOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RuliWebConnection!
  sLRClub(where: SLRClubWhereUniqueInput!): SLRClub
  sLRClubs(where: SLRClubWhereInput, orderBy: SLRClubOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SLRClub]!
  sLRClubsConnection(where: SLRClubWhereInput, orderBy: SLRClubOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SLRClubConnection!
  savedPosts(where: SavedPostsWhereUniqueInput!): SavedPosts
  savedPostses(where: SavedPostsWhereInput, orderBy: SavedPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedPosts]!
  savedPostsesConnection(where: SavedPostsWhereInput, orderBy: SavedPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SavedPostsConnection!
  sortedPosts(where: SortedPostsWhereUniqueInput!): SortedPosts
  sortedPostses(where: SortedPostsWhereInput, orderBy: SortedPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SortedPosts]!
  sortedPostsesConnection(where: SortedPostsWhereInput, orderBy: SortedPostsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SortedPostsConnection!
  tempPost(where: TempPostWhereUniqueInput!): TempPost
  tempPosts(where: TempPostWhereInput, orderBy: TempPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TempPost]!
  tempPostsConnection(where: TempPostWhereInput, orderBy: TempPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TempPostConnection!
  theQoo(where: TheQooWhereUniqueInput!): TheQoo
  theQoos(where: TheQooWhereInput, orderBy: TheQooOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TheQoo]!
  theQoosConnection(where: TheQooWhereInput, orderBy: TheQooOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TheQooConnection!
  todayHumor(where: TodayHumorWhereUniqueInput!): TodayHumor
  todayHumors(where: TodayHumorWhereInput, orderBy: TodayHumorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodayHumor]!
  todayHumorsConnection(where: TodayHumorWhereInput, orderBy: TodayHumorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodayHumorConnection!
  node(id: ID!): Node
}

type RuliWeb {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type RuliWebConnection {
  pageInfo: PageInfo!
  edges: [RuliWebEdge]!
  aggregate: AggregateRuliWeb!
}

input RuliWebCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type RuliWebEdge {
  node: RuliWeb!
  cursor: String!
}

enum RuliWebOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type RuliWebPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type RuliWebSubscriptionPayload {
  mutation: MutationType!
  node: RuliWeb
  updatedFields: [String!]
  previousValues: RuliWebPreviousValues
}

input RuliWebSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RuliWebWhereInput
  AND: [RuliWebSubscriptionWhereInput!]
  OR: [RuliWebSubscriptionWhereInput!]
  NOT: [RuliWebSubscriptionWhereInput!]
}

input RuliWebUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input RuliWebUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input RuliWebWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [RuliWebWhereInput!]
  OR: [RuliWebWhereInput!]
  NOT: [RuliWebWhereInput!]
}

input RuliWebWhereUniqueInput {
  id: ID
}

type SavedPosts {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
  createdAt: DateTime!
}

type SavedPostsConnection {
  pageInfo: PageInfo!
  edges: [SavedPostsEdge]!
  aggregate: AggregateSavedPosts!
}

input SavedPostsCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
}

type SavedPostsEdge {
  node: SavedPosts!
  cursor: String!
}

enum SavedPostsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type SavedPostsPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
  createdAt: DateTime!
}

type SavedPostsSubscriptionPayload {
  mutation: MutationType!
  node: SavedPosts
  updatedFields: [String!]
  previousValues: SavedPostsPreviousValues
}

input SavedPostsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SavedPostsWhereInput
  AND: [SavedPostsSubscriptionWhereInput!]
  OR: [SavedPostsSubscriptionWhereInput!]
  NOT: [SavedPostsSubscriptionWhereInput!]
}

input SavedPostsUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input SavedPostsUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input SavedPostsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SavedPostsWhereInput!]
  OR: [SavedPostsWhereInput!]
  NOT: [SavedPostsWhereInput!]
}

input SavedPostsWhereUniqueInput {
  id: ID
}

type SLRClub {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type SLRClubConnection {
  pageInfo: PageInfo!
  edges: [SLRClubEdge]!
  aggregate: AggregateSLRClub!
}

input SLRClubCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type SLRClubEdge {
  node: SLRClub!
  cursor: String!
}

enum SLRClubOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type SLRClubPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type SLRClubSubscriptionPayload {
  mutation: MutationType!
  node: SLRClub
  updatedFields: [String!]
  previousValues: SLRClubPreviousValues
}

input SLRClubSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SLRClubWhereInput
  AND: [SLRClubSubscriptionWhereInput!]
  OR: [SLRClubSubscriptionWhereInput!]
  NOT: [SLRClubSubscriptionWhereInput!]
}

input SLRClubUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input SLRClubUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input SLRClubWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SLRClubWhereInput!]
  OR: [SLRClubWhereInput!]
  NOT: [SLRClubWhereInput!]
}

input SLRClubWhereUniqueInput {
  id: ID
}

type SortedPosts {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
  createdAt: DateTime!
}

type SortedPostsConnection {
  pageInfo: PageInfo!
  edges: [SortedPostsEdge]!
  aggregate: AggregateSortedPosts!
}

input SortedPostsCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
}

type SortedPostsEdge {
  node: SortedPosts!
  cursor: String!
}

enum SortedPostsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type SortedPostsPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
  createdAt: DateTime!
}

type SortedPostsSubscriptionPayload {
  mutation: MutationType!
  node: SortedPosts
  updatedFields: [String!]
  previousValues: SortedPostsPreviousValues
}

input SortedPostsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SortedPostsWhereInput
  AND: [SortedPostsSubscriptionWhereInput!]
  OR: [SortedPostsSubscriptionWhereInput!]
  NOT: [SortedPostsSubscriptionWhereInput!]
}

input SortedPostsUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input SortedPostsUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input SortedPostsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SortedPostsWhereInput!]
  OR: [SortedPostsWhereInput!]
  NOT: [SortedPostsWhereInput!]
}

input SortedPostsWhereUniqueInput {
  id: ID
}

type Subscription {
  bobae(where: BobaeSubscriptionWhereInput): BobaeSubscriptionPayload
  bullpen(where: BullpenSubscriptionWhereInput): BullpenSubscriptionPayload
  clien(where: ClienSubscriptionWhereInput): ClienSubscriptionPayload
  cook(where: CookSubscriptionWhereInput): CookSubscriptionPayload
  dogDrip(where: DogDripSubscriptionWhereInput): DogDripSubscriptionPayload
  errorLog(where: ErrorLogSubscriptionWhereInput): ErrorLogSubscriptionPayload
  etoland(where: EtolandSubscriptionWhereInput): EtolandSubscriptionPayload
  fmKorea(where: FmKoreaSubscriptionWhereInput): FmKoreaSubscriptionPayload
  gasengi(where: GasengiSubscriptionWhereInput): GasengiSubscriptionPayload
  humorUniv(where: HumorUnivSubscriptionWhereInput): HumorUnivSubscriptionPayload
  ilbe(where: IlbeSubscriptionWhereInput): IlbeSubscriptionPayload
  instiz(where: InstizSubscriptionWhereInput): InstizSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  postLinks(where: PostLinksSubscriptionWhereInput): PostLinksSubscriptionPayload
  ppompPu(where: PpompPuSubscriptionWhereInput): PpompPuSubscriptionPayload
  ruliWeb(where: RuliWebSubscriptionWhereInput): RuliWebSubscriptionPayload
  sLRClub(where: SLRClubSubscriptionWhereInput): SLRClubSubscriptionPayload
  savedPosts(where: SavedPostsSubscriptionWhereInput): SavedPostsSubscriptionPayload
  sortedPosts(where: SortedPostsSubscriptionWhereInput): SortedPostsSubscriptionPayload
  tempPost(where: TempPostSubscriptionWhereInput): TempPostSubscriptionPayload
  theQoo(where: TheQooSubscriptionWhereInput): TheQooSubscriptionPayload
  todayHumor(where: TodayHumorSubscriptionWhereInput): TodayHumorSubscriptionPayload
}

type TempPost {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
  createdAt: DateTime!
}

type TempPostConnection {
  pageInfo: PageInfo!
  edges: [TempPostEdge]!
  aggregate: AggregateTempPost!
}

input TempPostCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
}

type TempPostEdge {
  node: TempPost!
  cursor: String!
}

enum TempPostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type TempPostPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int!
  link: String!
  from: String!
  createdAt: DateTime!
}

type TempPostSubscriptionPayload {
  mutation: MutationType!
  node: TempPost
  updatedFields: [String!]
  previousValues: TempPostPreviousValues
}

input TempPostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TempPostWhereInput
  AND: [TempPostSubscriptionWhereInput!]
  OR: [TempPostSubscriptionWhereInput!]
  NOT: [TempPostSubscriptionWhereInput!]
}

input TempPostUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input TempPostUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input TempPostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TempPostWhereInput!]
  OR: [TempPostWhereInput!]
  NOT: [TempPostWhereInput!]
}

input TempPostWhereUniqueInput {
  id: ID
}

type TheQoo {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type TheQooConnection {
  pageInfo: PageInfo!
  edges: [TheQooEdge]!
  aggregate: AggregateTheQoo!
}

input TheQooCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type TheQooEdge {
  node: TheQoo!
  cursor: String!
}

enum TheQooOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type TheQooPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type TheQooSubscriptionPayload {
  mutation: MutationType!
  node: TheQoo
  updatedFields: [String!]
  previousValues: TheQooPreviousValues
}

input TheQooSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TheQooWhereInput
  AND: [TheQooSubscriptionWhereInput!]
  OR: [TheQooSubscriptionWhereInput!]
  NOT: [TheQooSubscriptionWhereInput!]
}

input TheQooUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input TheQooUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input TheQooWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TheQooWhereInput!]
  OR: [TheQooWhereInput!]
  NOT: [TheQooWhereInput!]
}

input TheQooWhereUniqueInput {
  id: ID
}

type TodayHumor {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type TodayHumorConnection {
  pageInfo: PageInfo!
  edges: [TodayHumorEdge]!
  aggregate: AggregateTodayHumor!
}

input TodayHumorCreateInput {
  id: ID
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
}

type TodayHumorEdge {
  node: TodayHumor!
  cursor: String!
}

enum TodayHumorOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  registeredAt_ASC
  registeredAt_DESC
  hitCount_ASC
  hitCount_DESC
  link_ASC
  link_DESC
  from_ASC
  from_DESC
  createdAt_ASC
  createdAt_DESC
}

type TodayHumorPreviousValues {
  id: ID!
  title: String!
  author: String
  registeredAt: String
  hitCount: Int
  link: String!
  from: String!
  createdAt: DateTime!
}

type TodayHumorSubscriptionPayload {
  mutation: MutationType!
  node: TodayHumor
  updatedFields: [String!]
  previousValues: TodayHumorPreviousValues
}

input TodayHumorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TodayHumorWhereInput
  AND: [TodayHumorSubscriptionWhereInput!]
  OR: [TodayHumorSubscriptionWhereInput!]
  NOT: [TodayHumorSubscriptionWhereInput!]
}

input TodayHumorUpdateInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input TodayHumorUpdateManyMutationInput {
  title: String
  author: String
  registeredAt: String
  hitCount: Int
  link: String
  from: String
}

input TodayHumorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  registeredAt: String
  registeredAt_not: String
  registeredAt_in: [String!]
  registeredAt_not_in: [String!]
  registeredAt_lt: String
  registeredAt_lte: String
  registeredAt_gt: String
  registeredAt_gte: String
  registeredAt_contains: String
  registeredAt_not_contains: String
  registeredAt_starts_with: String
  registeredAt_not_starts_with: String
  registeredAt_ends_with: String
  registeredAt_not_ends_with: String
  hitCount: Int
  hitCount_not: Int
  hitCount_in: [Int!]
  hitCount_not_in: [Int!]
  hitCount_lt: Int
  hitCount_lte: Int
  hitCount_gt: Int
  hitCount_gte: Int
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TodayHumorWhereInput!]
  OR: [TodayHumorWhereInput!]
  NOT: [TodayHumorWhereInput!]
}

input TodayHumorWhereUniqueInput {
  id: ID
}
`
      }
    